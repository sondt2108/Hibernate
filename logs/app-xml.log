[DEBUG] 04-04-2022 10:17:17 [main] logging - Logging Provider: org.jboss.logging.Log4j2LoggerProvider
[DEBUG] 04-04-2022 10:17:17 [main] IntegratorServiceImpl - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
[DEBUG] 04-04-2022 10:17:17 [main] IntegratorServiceImpl - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
[DEBUG] 04-04-2022 10:17:17 [main] IntegratorServiceImpl - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
[INFO ] 04-04-2022 10:17:17 [main] Version - HHH000412: Hibernate ORM core version 5.6.7.Final
[DEBUG] 04-04-2022 10:17:17 [main] Environment - HHH000206: hibernate.properties not found
[DEBUG] 04-04-2022 10:17:18 [main] LocalXmlResourceResolver - Interpreting public/system identifier : [-//Hibernate/Hibernate Configuration DTD 3.0//EN] - [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd]
[WARN ] 04-04-2022 10:17:18 [main] deprecation - HHH90000012: Recognized obsolete hibernate namespace http://hibernate.sourceforge.net/hibernate-configuration. Use namespace http://www.hibernate.org/dtd/hibernate-configuration instead.  Support for obsolete DTD/XSD namespaces may be removed at any time.
[DEBUG] 04-04-2022 10:17:18 [main] LocalXmlResourceResolver - Recognized hibernate-configuration identifier; attempting to resolve on classpath under org/hibernate/
[DEBUG] 04-04-2022 10:17:18 [main] JaxbCfgProcessor - cfg.xml document did not define namespaces; wrapping in custom event reader to introduce namespace information
[DEBUG] 04-04-2022 10:17:18 [main] Configuration - Building session factory using internal StandardServiceRegistryBuilder
[DEBUG] 04-04-2022 10:17:18 [main] ServiceBinding - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
[DEBUG] 04-04-2022 10:17:18 [main] Configuration - Building session factory using provided StandardServiceRegistry
[DEBUG] 04-04-2022 10:17:18 [main] StrategyCreatorRegionFactoryImpl - RegionFactory impl [org.hibernate.cache.ehcache.internal.SingletonEhcacheRegionFactory] did not provide constructor accepting Properties
[DEBUG] 04-04-2022 10:17:18 [main] StrategyCreatorRegionFactoryImpl - RegionFactory impl [org.hibernate.cache.ehcache.internal.SingletonEhcacheRegionFactory] did not provide constructor accepting Properties
[WARN ] 04-04-2022 10:17:18 [main] deprecation - HHH020100: The Ehcache second-level cache provider for Hibernate is deprecated.  See https://hibernate.atlassian.net/browse/HHH-12441 for details.
[DEBUG] 04-04-2022 10:17:18 [main] RegionFactoryInitiator - Cache region factory : org.hibernate.cache.ehcache.internal.SingletonEhcacheRegionFactory
[INFO ] 04-04-2022 10:17:18 [main] Version - HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BooleanType@79c5636f
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BooleanType@79c5636f
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@79c5636f
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@757f675c
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.TrueFalseType@535b8c24
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.YesNoType@5e63cad
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.ByteType@55b5e331
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.ByteType@55b5e331
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@55b5e331
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration character -> org.hibernate.type.CharacterType@219f4597
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration char -> org.hibernate.type.CharacterType@219f4597
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@219f4597
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration short -> org.hibernate.type.ShortType@46b695ec
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration short -> org.hibernate.type.ShortType@46b695ec
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@46b695ec
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.IntegerType@3af9aa66
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration int -> org.hibernate.type.IntegerType@3af9aa66
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@3af9aa66
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration long -> org.hibernate.type.LongType@64d43929
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration long -> org.hibernate.type.LongType@64d43929
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.LongType@64d43929
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration float -> org.hibernate.type.FloatType@1e7f2e0f
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration float -> org.hibernate.type.FloatType@1e7f2e0f
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@1e7f2e0f
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration double -> org.hibernate.type.DoubleType@2516fc68
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration double -> org.hibernate.type.DoubleType@2516fc68
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@2516fc68
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@347bdeef
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@347bdeef
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@49298ce7
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@49298ce7
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration string -> org.hibernate.type.StringType@4a325eb9
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.StringType@4a325eb9
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@194152cf
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@ec50f54
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration url -> org.hibernate.type.UrlType@6c000e0c
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.UrlType@6c000e0c
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.DurationType@9ec531
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@9ec531
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration Instant -> org.hibernate.type.InstantType@4e6d7365
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@4e6d7365
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@64a896b0
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@64a896b0
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@73d6d0c
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@73d6d0c
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@1500e009
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@1500e009
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@cd7f1ae
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@cd7f1ae
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@7a356a0d
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@7a356a0d
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@22df874e
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@22df874e
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration date -> org.hibernate.type.DateType@7de4a01f
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.DateType@7de4a01f
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration time -> org.hibernate.type.TimeType@907f2b7
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@907f2b7
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.TimestampType@75699e35
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@75699e35
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@75699e35
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@1f14f20c
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.CalendarType@48e7b3d2
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@48e7b3d2
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@48e7b3d2
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@6f89f665
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.CalendarTimeType@c96a4ea
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.LocaleType@3935e9a8
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@3935e9a8
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.CurrencyType@66d57c1b
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@66d57c1b
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.TimeZoneType@697446d4
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@697446d4
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration class -> org.hibernate.type.ClassType@75504cef
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@75504cef
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@138a7441
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@138a7441
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@7e31ce0f
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BinaryType@64e92d61
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BinaryType@64e92d61
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BinaryType@64e92d61
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@79b663b3
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@79b663b3
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@79b663b3
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.RowVersionType@5649ec46
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration image -> org.hibernate.type.ImageType@4fe01805
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.CharArrayType@3e521715
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.CharArrayType@3e521715
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.CharArrayType@3e521715
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@5767b2af
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@5767b2af
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@5767b2af
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration text -> org.hibernate.type.TextType@48b0e701
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.NTextType@7fae4d4a
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BlobType@5ffc5491
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@5ffc5491
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@3bd55d8
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.ClobType@6b04acb2
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@6b04acb2
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.NClobType@30b9eadd
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@30b9eadd
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@4dd94a58
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@72be135f
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.SerializableType@27cbfddf
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration object -> org.hibernate.type.ObjectType@77bb0ab5
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@77bb0ab5
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@5488b5c5
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@4248ed58
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@712ca57b
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@4564e94b
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@54534abf
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@51745f40
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@45673f68
[DEBUG] 04-04-2022 10:17:18 [main] BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@27abb83e
[DEBUG] 04-04-2022 10:17:18 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
[DEBUG] 04-04-2022 10:17:18 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
[DEBUG] 04-04-2022 10:17:18 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
[DEBUG] 04-04-2022 10:17:18 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
[DEBUG] 04-04-2022 10:17:18 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
[DEBUG] 04-04-2022 10:17:18 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
[DEBUG] 04-04-2022 10:17:18 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
[DEBUG] 04-04-2022 10:17:18 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
[DEBUG] 04-04-2022 10:17:18 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
[DEBUG] 04-04-2022 10:17:18 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
[DEBUG] 04-04-2022 10:17:18 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
[DEBUG] 04-04-2022 10:17:18 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
[DEBUG] 04-04-2022 10:17:18 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
[DEBUG] 04-04-2022 10:17:18 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
[INFO ] 04-04-2022 10:17:18 [main] C3P0ConnectionProvider - HHH010002: C3P0 using driver: com.mysql.cj.jdbc.Driver at URL: jdbc:mysql://localhost:3306/employee
[INFO ] 04-04-2022 10:17:18 [main] C3P0ConnectionProvider - HHH10001001: Connection properties: {password=****, user=root}
[INFO ] 04-04-2022 10:17:18 [main] C3P0ConnectionProvider - HHH10001003: Autocommit mode: false
[INFO ] 04-04-2022 10:17:18 [main] C3P0ConnectionProvider - HHH10001007: JDBC isolation level: <unknown>
[DEBUG] 04-04-2022 10:17:18 [main] JdbcEnvironmentInitiator - Database ->
       name : MySQL
    version : 5.5.5-10.4.22-MariaDB
      major : 5
      minor : 5
[DEBUG] 04-04-2022 10:17:18 [main] JdbcEnvironmentInitiator - Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.19 (Revision: a0ca826f5cdf51a98356fdfb1bf251eb042f80bf)
      major : 8
      minor : 0
[DEBUG] 04-04-2022 10:17:18 [main] JdbcEnvironmentInitiator - JDBC version : 4.2
[INFO ] 04-04-2022 10:17:18 [main] Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQLDialect
[DEBUG] 04-04-2022 10:17:18 [main] IdentifierHelperBuilder - JDBC driver metadata reported database stores quoted identifiers in more than one case
[DEBUG] 04-04-2022 10:17:18 [main] IdentifierHelperBuilder - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
[DEBUG] 04-04-2022 10:17:18 [main] TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@4ba380c7] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@784c5ef5]
[DEBUG] 04-04-2022 10:17:18 [main] Namespace - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
[DEBUG] 04-04-2022 10:17:18 [main] AnnotationBinder - Binding entity from annotated class: models.Employee
[DEBUG] 04-04-2022 10:17:18 [main] Ejb3Column - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
[DEBUG] 04-04-2022 10:17:18 [main] EntityBinder - Import with entity name Employee
[DEBUG] 04-04-2022 10:17:18 [main] EntityBinder - Bind entity models.Employee on table employee
[DEBUG] 04-04-2022 10:17:18 [main] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(employee), mappingColumn=id, insertable=true, updatable=true, unique=false}
[DEBUG] 04-04-2022 10:17:18 [main] ClassLoaderAccessImpl - Not known whether passed class name [models.Employee] is safe
[DEBUG] 04-04-2022 10:17:18 [main] ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : models.Employee
[DEBUG] 04-04-2022 10:17:18 [main] PropertyBinder - MetadataSourceProcessor property id with lazy=false
[DEBUG] 04-04-2022 10:17:18 [main] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [models.Employee:id]
[DEBUG] 04-04-2022 10:17:18 [main] SimpleValueBinder - building SimpleValue for id
[DEBUG] 04-04-2022 10:17:18 [main] PropertyBinder - Building property id
[DEBUG] 04-04-2022 10:17:18 [main] BinderHelper - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
[DEBUG] 04-04-2022 10:17:18 [main] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(employee), mappingColumn=address, insertable=true, updatable=true, unique=false}
[DEBUG] 04-04-2022 10:17:18 [main] PropertyBinder - MetadataSourceProcessor property address with lazy=false
[DEBUG] 04-04-2022 10:17:18 [main] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [models.Employee:address]
[DEBUG] 04-04-2022 10:17:18 [main] SimpleValueBinder - building SimpleValue for address
[DEBUG] 04-04-2022 10:17:18 [main] PropertyBinder - Building property address
[DEBUG] 04-04-2022 10:17:18 [main] Ejb3Column - Binding column: Ejb3JoinColumn{logicalColumnName='dept_id', referencedColumn='', mappedBy=''}
[DEBUG] 04-04-2022 10:17:18 [main] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(employee), mappingColumn=department, insertable=true, updatable=true, unique=false}
[DEBUG] 04-04-2022 10:17:18 [main] PropertyBinder - Building property department
[DEBUG] 04-04-2022 10:17:18 [main] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(employee), mappingColumn=email, insertable=true, updatable=true, unique=false}
[DEBUG] 04-04-2022 10:17:18 [main] PropertyBinder - MetadataSourceProcessor property email with lazy=false
[DEBUG] 04-04-2022 10:17:18 [main] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [models.Employee:email]
[DEBUG] 04-04-2022 10:17:18 [main] SimpleValueBinder - building SimpleValue for email
[DEBUG] 04-04-2022 10:17:18 [main] PropertyBinder - Building property email
[DEBUG] 04-04-2022 10:17:18 [main] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(employee), mappingColumn=fullName, insertable=true, updatable=true, unique=false}
[DEBUG] 04-04-2022 10:17:18 [main] PropertyBinder - MetadataSourceProcessor property fullName with lazy=false
[DEBUG] 04-04-2022 10:17:18 [main] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [models.Employee:fullName]
[DEBUG] 04-04-2022 10:17:18 [main] SimpleValueBinder - building SimpleValue for fullName
[DEBUG] 04-04-2022 10:17:18 [main] PropertyBinder - Building property fullName
[DEBUG] 04-04-2022 10:17:18 [main] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(employee), mappingColumn=phoneNumber, insertable=true, updatable=true, unique=false}
[DEBUG] 04-04-2022 10:17:18 [main] PropertyBinder - MetadataSourceProcessor property phoneNumber with lazy=false
[DEBUG] 04-04-2022 10:17:18 [main] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [models.Employee:phoneNumber]
[DEBUG] 04-04-2022 10:17:18 [main] SimpleValueBinder - building SimpleValue for phoneNumber
[DEBUG] 04-04-2022 10:17:18 [main] PropertyBinder - Building property phoneNumber
[DEBUG] 04-04-2022 10:17:18 [main] AnnotationBinder - Binding entity from annotated class: models.Department
[DEBUG] 04-04-2022 10:17:18 [main] Ejb3Column - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
[DEBUG] 04-04-2022 10:17:18 [main] EntityBinder - Import with entity name Department
[DEBUG] 04-04-2022 10:17:18 [main] EntityBinder - Bind entity models.Department on table departments
[DEBUG] 04-04-2022 10:17:18 [main] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(departments), mappingColumn=dept_id, insertable=true, updatable=true, unique=false}
[DEBUG] 04-04-2022 10:17:18 [main] ClassLoaderAccessImpl - Not known whether passed class name [models.Department] is safe
[DEBUG] 04-04-2022 10:17:18 [main] ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : models.Department
[DEBUG] 04-04-2022 10:17:18 [main] PropertyBinder - MetadataSourceProcessor property dept_id with lazy=false
[DEBUG] 04-04-2022 10:17:18 [main] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [models.Department:dept_id]
[DEBUG] 04-04-2022 10:17:18 [main] SimpleValueBinder - building SimpleValue for dept_id
[DEBUG] 04-04-2022 10:17:18 [main] PropertyBinder - Building property dept_id
[DEBUG] 04-04-2022 10:17:18 [main] BinderHelper - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(dept_id)]), dept_id, identity, , ...)
[DEBUG] 04-04-2022 10:17:18 [main] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(departments), mappingColumn=dept_name, insertable=true, updatable=true, unique=false}
[DEBUG] 04-04-2022 10:17:18 [main] PropertyBinder - MetadataSourceProcessor property dept_name with lazy=false
[DEBUG] 04-04-2022 10:17:18 [main] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [models.Department:dept_name]
[DEBUG] 04-04-2022 10:17:18 [main] SimpleValueBinder - building SimpleValue for dept_name
[DEBUG] 04-04-2022 10:17:18 [main] PropertyBinder - Building property dept_name
[DEBUG] 04-04-2022 10:17:18 [main] SimpleValueBinder - Starting fillSimpleValue for id
[DEBUG] 04-04-2022 10:17:18 [main] SimpleValueBinder - Starting fillSimpleValue for address
[DEBUG] 04-04-2022 10:17:18 [main] SimpleValueBinder - Starting fillSimpleValue for email
[DEBUG] 04-04-2022 10:17:18 [main] SimpleValueBinder - Starting fillSimpleValue for fullName
[DEBUG] 04-04-2022 10:17:18 [main] SimpleValueBinder - Starting fillSimpleValue for phoneNumber
[DEBUG] 04-04-2022 10:17:18 [main] SimpleValueBinder - Starting fillSimpleValue for dept_id
[DEBUG] 04-04-2022 10:17:18 [main] SimpleValueBinder - Starting fillSimpleValue for dept_name
[DEBUG] 04-04-2022 10:17:18 [main] PrimaryKey - Forcing column [id] to be non-null as it is part of the primary key for table [employee]
[DEBUG] 04-04-2022 10:17:18 [main] PrimaryKey - Forcing column [dept_id] to be non-null as it is part of the primary key for table [departments]
[DEBUG] 04-04-2022 10:17:18 [main] InFlightMetadataCollectorImpl - Resolving reference to class: models.Department
[DEBUG] 04-04-2022 10:17:18 [main] InFlightMetadataCollectorImpl - Resolving reference to class: models.Department
[DEBUG] 04-04-2022 10:17:18 [main] SessionFactoryImpl - Building session factory
[DEBUG] 04-04-2022 10:17:18 [main] Settings - SessionFactory name : null
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Automatic flush during beforeCompletion(): enabled
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Automatic session close at end of transaction: disabled
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Statistics: disabled
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Deleted entity synthetic identifier rollback: disabled
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Default entity-mode: pojo
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Allow initialization of lazy state outside session : disabled
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Using BatchFetchStyle : LEGACY
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Default batch fetch size: -1
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Maximum outer join fetch depth: 2
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Default null ordering: NONE
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Order SQL updates by primary key: disabled
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Order SQL inserts for batching: disabled
[DEBUG] 04-04-2022 10:17:18 [main] Settings - multi-tenancy strategy : NONE
[DEBUG] 04-04-2022 10:17:18 [main] Settings - JTA Track by Thread: enabled
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Query language substitutions: {}
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Named query checking : enabled
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Second-level cache: enabled
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Second-level query cache: enabled
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Second-level query cache factory: org.hibernate.cache.internal.StandardTimestampsCacheFactory@6ec7bce0
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Second-level cache region prefix: null
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Optimize second-level cache for minimal puts: disabled
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Structured second-level cache entries: disabled
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Second-level cache direct-reference entries: disabled
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Automatic eviction of collection cache: disabled
[DEBUG] 04-04-2022 10:17:18 [main] Settings - JDBC batch size: 15
[DEBUG] 04-04-2022 10:17:18 [main] Settings - JDBC batch updates for versioned data: enabled
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Scrollable result sets: enabled
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Wrap result sets: disabled
[DEBUG] 04-04-2022 10:17:18 [main] Settings - JDBC3 getGeneratedKeys(): enabled
[DEBUG] 04-04-2022 10:17:18 [main] Settings - JDBC result set fetch size: null
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Connection release mode: AFTER_TRANSACTION
[DEBUG] 04-04-2022 10:17:18 [main] Settings - Generate SQL with comments: disabled
[DEBUG] 04-04-2022 10:17:18 [main] Settings - JPA compliance - query : disabled
[DEBUG] 04-04-2022 10:17:18 [main] Settings - JPA compliance - closed-handling : disabled
[DEBUG] 04-04-2022 10:17:18 [main] Settings - JPA compliance - lists : disabled
[DEBUG] 04-04-2022 10:17:18 [main] Settings - JPA compliance - transactions : disabled
[DEBUG] 04-04-2022 10:17:18 [main] SessionFactoryServiceRegistryImpl - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
[DEBUG] 04-04-2022 10:17:18 [main] SessionFactoryServiceRegistryImpl - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
[DEBUG] 04-04-2022 10:17:18 [main] SingletonEhcacheRegionFactory - prepending / to /ehcache.xml. It should be placed in the root of the classpath rather than in a package.
[DEBUG] 04-04-2022 10:17:18 [main] ehcache - Creating EhCacheRegionFactory from a specified resource: /ehcache.xml.  Resolved to URL: file:/D:/MyMaven/Hibernate/target/classes/ehcache.xml
[WARN ] 04-04-2022 10:17:18 [main] cache - HHH90001006: Missing cache[default-update-timestamps-region] was created on-the-fly. The created cache will use a provider-specific default configuration: make sure you defined one. You can disable this warning by setting 'hibernate.cache.ehcache.missing_cache_strategy' to 'create'.
[WARN ] 04-04-2022 10:17:18 [main] cache - HHH90001007: Using legacy cache name [org.hibernate.cache.internal.StandardQueryCache] because configuration could not be found for cache [default-query-results-region]. Update your configuration to rename cache [org.hibernate.cache.internal.StandardQueryCache] to [default-query-results-region].
[DEBUG] 04-04-2022 10:17:18 [main] SessionFactoryImpl - Session factory constructed with filter configurations : {}
[DEBUG] 04-04-2022 10:17:18 [main] SessionFactoryImpl - Instantiating session factory with properties: {hibernate.format_sql=true, java.specification.version=17, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, hibernate.dialect=org.hibernate.dialect.MySQLDialect, hibernate.c3p0.min_size=5, java.class.path=D:\MyMaven\Hibernate\target\classes;C:\Users\dtson1.TMA\.m2\repository\javax\servlet\jstl\1.2\jstl-1.2.jar;C:\Users\dtson1.TMA\.m2\repository\mysql\mysql-connector-java\8.0.19\mysql-connector-java-8.0.19.jar;C:\Users\dtson1.TMA\.m2\repository\org\hibernate\hibernate-c3p0\5.6.7.Final\hibernate-c3p0-5.6.7.Final.jar;C:\Users\dtson1.TMA\.m2\repository\org\jboss\logging\jboss-logging\3.4.3.Final\jboss-logging-3.4.3.Final.jar;C:\Users\dtson1.TMA\.m2\repository\com\mchange\c3p0\0.9.5.5\c3p0-0.9.5.5.jar;C:\Users\dtson1.TMA\.m2\repository\com\mchange\mchange-commons-java\0.2.19\mchange-commons-java-0.2.19.jar;C:\Users\dtson1.TMA\.m2\repository\org\apache\logging\log4j\log4j-api\2.17.2\log4j-api-2.17.2.jar;C:\Users\dtson1.TMA\.m2\repository\org\apache\logging\log4j\log4j-core\2.17.2\log4j-core-2.17.2.jar;C:\Users\dtson1.TMA\.m2\repository\org\hibernate\hibernate-core\5.6.7.Final\hibernate-core-5.6.7.Final.jar;C:\Users\dtson1.TMA\.m2\repository\javax\persistence\javax.persistence-api\2.2\javax.persistence-api-2.2.jar;C:\Users\dtson1.TMA\.m2\repository\net\bytebuddy\byte-buddy\1.12.8\byte-buddy-1.12.8.jar;C:\Users\dtson1.TMA\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\dtson1.TMA\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.1.1.Final\jboss-transaction-api_1.2_spec-1.1.1.Final.jar;C:\Users\dtson1.TMA\.m2\repository\org\jboss\jandex\2.4.2.Final\jandex-2.4.2.Final.jar;C:\Users\dtson1.TMA\.m2\repository\com\fasterxml\classmate\1.5.1\classmate-1.5.1.jar;C:\Users\dtson1.TMA\.m2\repository\javax\activation\javax.activation-api\1.2.0\javax.activation-api-1.2.0.jar;C:\Users\dtson1.TMA\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.1.2.Final\hibernate-commons-annotations-5.1.2.Final.jar;C:\Users\dtson1.TMA\.m2\repository\javax\xml\bind\jaxb-api\2.3.1\jaxb-api-2.3.1.jar;C:\Users\dtson1.TMA\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.1\jaxb-runtime-2.3.1.jar;C:\Users\dtson1.TMA\.m2\repository\org\glassfish\jaxb\txw2\2.3.1\txw2-2.3.1.jar;C:\Users\dtson1.TMA\.m2\repository\com\sun\istack\istack-commons-runtime\3.0.7\istack-commons-runtime-3.0.7.jar;C:\Users\dtson1.TMA\.m2\repository\org\jvnet\staxex\stax-ex\1.8\stax-ex-1.8.jar;C:\Users\dtson1.TMA\.m2\repository\com\sun\xml\fastinfoset\FastInfoset\1.2.15\FastInfoset-1.2.15.jar;C:\Users\dtson1.TMA\.m2\repository\org\ehcache\ehcache\3.0.0\ehcache-3.0.0.jar;C:\Users\dtson1.TMA\.m2\repository\org\hibernate\hibernate-ehcache\5.6.7.Final\hibernate-ehcache-5.6.7.Final.jar;C:\Users\dtson1.TMA\.m2\repository\net\sf\ehcache\ehcache\2.10.6\ehcache-2.10.6.jar;C:\Users\dtson1.TMA\.m2\repository\org\slf4j\slf4j-simple\2.0.0-alpha0\slf4j-simple-2.0.0-alpha0.jar;C:\Users\dtson1.TMA\.m2\repository\org\slf4j\slf4j-api\2.0.0-alpha7\slf4j-api-2.0.0-alpha7.jar, net.sf.ehcache.configurationResourceName=ehcache.xml, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, hbm2ddl.auto=update, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Asia/Bangkok, java.vm.specification.version=17, os.name=Windows 10, current_session_context_class=thread, cache.use_query_cache=true, sun.java.launcher=SUN_STANDARD, user.country=US, sun.boot.library.path=C:\Users\dtson1.TMA\.jdks\openjdk-17.0.2\bin, sun.java.command=dao.EmployeeDao, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\dtson1.TMA, hibernate.c3p0.max_statements=50, user.language=en, java.specification.vendor=Oracle Corporation, java.version.date=2022-01-18, java.home=C:\Users\dtson1.TMA\.jdks\openjdk-17.0.2, file.separator=\, java.vm.compressedOopsMode=Zero based, line.separator=
, hibernate.c3p0.timeout=180, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory, hibernate.hbm2ddl.auto=update, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, hibernate.c3p0.max_size=200, java.runtime.version=17.0.2+8-86, user.name=dtson1, hibernate.cache.use_query_cache=true, path.separator=;, hibernate.net.sf.ehcache.configurationResourceName=ehcache.xml, hibernate.connection.username=****, os.version=10.0, java.runtime.name=OpenJDK Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost:3306/employee, file.encoding=UTF-8, format_sql=true, java.vm.name=OpenJDK 64-Bit Server VM, hibernate.show_sql=true, hibernate.current_session_context_class=thread, show_sql=true, hibernate.connection.driver_class=com.mysql.cj.jdbc.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=C:\Users\dtson1.TMA\AppData\Local\Temp\, java.version=17.0.2, user.dir=D:\MyMaven\Hibernate, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@42cc183e, native.encoding=Cp1252, hibernate.cache.use_second_level_cache=true, java.library.path=C:\Users\dtson1.TMA\.jdks\openjdk-17.0.2\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files\Eclipse Adoptium\jdk-11.0.14.101-hotspot\bin;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Program Files\nodejs\;C:\Users\dtson1.TMA\AppData\Local\Microsoft\WindowsApps;;C:\Users\dtson1.TMA\AppData\Local\Programs\Microsoft VS Code\bin;C:\Program Files\JetBrains\IntelliJ IDEA 2021.3.2\bin;;., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.2+8-86, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, java.class.version=61.0}
[DEBUG] 04-04-2022 10:17:18 [main] JaccIntegrator - Skipping JACC integration as it was not enabled
[DEBUG] 04-04-2022 10:17:18 [main] SessionFactoryImpl - Instantiated session factory
[DEBUG] 04-04-2022 10:17:18 [main] TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@4ba380c7] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@6d099323]
[WARN ] 04-04-2022 10:17:18 [main] cache - HHH90001006: Missing cache[models.Employee] was created on-the-fly. The created cache will use a provider-specific default configuration: make sure you defined one. You can disable this warning by setting 'hibernate.cache.ehcache.missing_cache_strategy' to 'create'.
[DEBUG] 04-04-2022 10:17:18 [main] DomainDataRegionTemplate - Generating entity cache access [read-only] : NavigableRole[models.Employee]
[WARN ] 04-04-2022 10:17:18 [main] cache - HHH90001003: Read-only caching was requested for mutable entity [NavigableRole[models.Employee]]
[WARN ] 04-04-2022 10:17:18 [main] cache - HHH90001006: Missing cache[models.Department] was created on-the-fly. The created cache will use a provider-specific default configuration: make sure you defined one. You can disable this warning by setting 'hibernate.cache.ehcache.missing_cache_strategy' to 'create'.
[DEBUG] 04-04-2022 10:17:18 [main] DomainDataRegionTemplate - Generating entity cache access [read-only] : NavigableRole[models.Department]
[WARN ] 04-04-2022 10:17:18 [main] cache - HHH90001003: Read-only caching was requested for mutable entity [NavigableRole[models.Department]]
[DEBUG] 04-04-2022 10:17:18 [main] ClassLoaderAccessImpl - Not known whether passed class name [models.Department] is safe
[DEBUG] 04-04-2022 10:17:18 [main] ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : models.Department
[DEBUG] 04-04-2022 10:17:19 [main] interceptor - To-one property `models.Employee#department` was mapped with LAZY + NO_PROXY but the class was not enhanced
[DEBUG] 04-04-2022 10:17:19 [main] interceptor - To-one property `models.Employee#department` was mapped with LAZY + NO_PROXY but the class was not enhanced
[DEBUG] 04-04-2022 10:17:19 [main] ClassLoaderAccessImpl - Not known whether passed class name [models.Employee] is safe
[DEBUG] 04-04-2022 10:17:19 [main] ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : models.Employee
[DEBUG] 04-04-2022 10:17:19 [main] interceptor - To-one property `models.Employee#department` was mapped with LAZY + NO_PROXY but the class was not enhanced
[DEBUG] 04-04-2022 10:17:19 [main] interceptor - To-one property `models.Employee#department` was mapped with LAZY + NO_PROXY but the class was not enhanced
[DEBUG] 04-04-2022 10:17:19 [main] AbstractEntityPersister - Static SQL for entity: models.Department
[DEBUG] 04-04-2022 10:17:19 [main] AbstractEntityPersister -  Version select: select dept_id from departments where dept_id =?
[DEBUG] 04-04-2022 10:17:19 [main] AbstractEntityPersister -  Snapshot select: select department_.dept_id, department_.dept_name as dept_nam2_0_ from departments department_ where department_.dept_id=?
[DEBUG] 04-04-2022 10:17:19 [main] AbstractEntityPersister -  Insert 0: insert into departments (dept_name, dept_id) values (?, ?)
[DEBUG] 04-04-2022 10:17:19 [main] AbstractEntityPersister -  Update 0: update departments set dept_name=? where dept_id=?
[DEBUG] 04-04-2022 10:17:19 [main] AbstractEntityPersister -  Delete 0: delete from departments where dept_id=?
[DEBUG] 04-04-2022 10:17:19 [main] AbstractEntityPersister -  Identity insert: insert into departments (dept_name) values (?)
[DEBUG] 04-04-2022 10:17:19 [main] QuerySpacesImpl - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@65c17e38]
[DEBUG] 04-04-2022 10:17:19 [main] MetamodelGraphWalker - Visiting attribute path : dept_name
[DEBUG] 04-04-2022 10:17:19 [main] FetchStyleLoadPlanBuildingAssociationVisitationStrategy - Building LoadPlan...
[DEBUG] 04-04-2022 10:17:19 [main] LoadQueryJoinAndFetchProcessor - processing queryspace <gen:0>
[DEBUG] 04-04-2022 10:17:19 [main] LoadPlanTreePrinter - LoadPlan(entity=models.Department)
    - Returns
       - EntityReturnImpl(entity=models.Department, querySpaceUid=<gen:0>, path=models.Department)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=models.Department)
          - SQL table alias mapping - department0_
          - alias suffix - 0_
          - suffixed key columns - {dept_id1_0_0_}

[DEBUG] 04-04-2022 10:17:19 [main] EntityLoader - Static select for entity models.Department [NONE]: select department0_.dept_id as dept_id1_0_0_, department0_.dept_name as dept_nam2_0_0_ from departments department0_ where department0_.dept_id=?
[DEBUG] 04-04-2022 10:17:19 [main] AbstractEntityPersister - Static SQL for entity: models.Employee
[DEBUG] 04-04-2022 10:17:19 [main] AbstractEntityPersister -  Version select: select id from employee where id =?
[DEBUG] 04-04-2022 10:17:19 [main] AbstractEntityPersister -  Snapshot select: select employee_.id, employee_.address as address2_1_, employee_.dept_id as dept_id6_1_, employee_.email as email3_1_, employee_.fullName as fullname4_1_, employee_.phoneNumber as phonenum5_1_ from employee employee_ where employee_.id=?
[DEBUG] 04-04-2022 10:17:19 [main] AbstractEntityPersister -  Insert 0: insert into employee (address, dept_id, email, fullName, phoneNumber, id) values (?, ?, ?, ?, ?, ?)
[DEBUG] 04-04-2022 10:17:19 [main] AbstractEntityPersister -  Update 0: update employee set address=?, dept_id=?, email=?, fullName=?, phoneNumber=? where id=?
[DEBUG] 04-04-2022 10:17:19 [main] AbstractEntityPersister -  Delete 0: delete from employee where id=?
[DEBUG] 04-04-2022 10:17:19 [main] AbstractEntityPersister -  Identity insert: insert into employee (address, dept_id, email, fullName, phoneNumber) values (?, ?, ?, ?, ?)
[DEBUG] 04-04-2022 10:17:19 [main] QuerySpacesImpl - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5f08fe00]
[DEBUG] 04-04-2022 10:17:19 [main] MetamodelGraphWalker - Visiting attribute path : address
[DEBUG] 04-04-2022 10:17:19 [main] MetamodelGraphWalker - Visiting attribute path : department
[DEBUG] 04-04-2022 10:17:19 [main] QuerySpacesImpl - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@100aa331]
[DEBUG] 04-04-2022 10:17:19 [main] MetamodelGraphWalker - Visiting attribute path : department.dept_name
[DEBUG] 04-04-2022 10:17:19 [main] MetamodelGraphWalker - Visiting attribute path : email
[DEBUG] 04-04-2022 10:17:19 [main] MetamodelGraphWalker - Visiting attribute path : fullName
[DEBUG] 04-04-2022 10:17:19 [main] MetamodelGraphWalker - Visiting attribute path : phoneNumber
[DEBUG] 04-04-2022 10:17:19 [main] FetchStyleLoadPlanBuildingAssociationVisitationStrategy - Building LoadPlan...
[DEBUG] 04-04-2022 10:17:19 [main] LoadQueryJoinAndFetchProcessor - processing queryspace <gen:0>
[DEBUG] 04-04-2022 10:17:19 [main] LoadPlanTreePrinter - LoadPlan(entity=models.Employee)
    - Returns
       - EntityReturnImpl(entity=models.Employee, querySpaceUid=<gen:0>, path=models.Employee)
          - EntityAttributeFetchImpl(entity=models.Department, querySpaceUid=<gen:1>, path=models.Employee.department)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=models.Employee)
          - SQL table alias mapping - employee0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(department)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=models.Department)
                - SQL table alias mapping - department1_
                - alias suffix - 1_
                - suffixed key columns - {dept_id1_0_1_}

[DEBUG] 04-04-2022 10:17:19 [main] EntityLoader - Static select for entity models.Employee [NONE]: select employee0_.id as id1_1_0_, employee0_.address as address2_1_0_, employee0_.dept_id as dept_id6_1_0_, employee0_.email as email3_1_0_, employee0_.fullName as fullname4_1_0_, employee0_.phoneNumber as phonenum5_1_0_, department1_.dept_id as dept_id1_0_1_, department1_.dept_name as dept_nam2_0_1_ from employee employee0_ left outer join departments department1_ on employee0_.dept_id=department1_.dept_id where employee0_.id=?
[INFO ] 04-04-2022 10:17:19 [main] access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@437c4b25] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
[DEBUG] 04-04-2022 10:17:19 [main] Table - No alter strings for table : departments
[DEBUG] 04-04-2022 10:17:19 [main] Table - No alter strings for table : employee
[DEBUG] 04-04-2022 10:17:19 [main] NamedQueryRepository - Checking 0 named HQL queries
[DEBUG] 04-04-2022 10:17:19 [main] NamedQueryRepository - Checking 0 named SQL queries
[DEBUG] 04-04-2022 10:17:19 [main] SessionFactoryServiceRegistryImpl - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
[DEBUG] 04-04-2022 10:17:19 [main] SessionFactoryRegistry - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@3b088163
[DEBUG] 04-04-2022 10:17:19 [main] SessionFactoryRegistry - Registering SessionFactory: 71a28b09-d4ed-4aaa-a909-455bd53faac0 (<unnamed>)
[DEBUG] 04-04-2022 10:17:19 [main] SessionFactoryRegistry - Not binding SessionFactory to JNDI, no JNDI name configured
[DEBUG] 04-04-2022 10:17:19 [main] StatisticsInitiator - Statistics initialized [enabled=false]
[DEBUG] 04-04-2022 10:17:19 [main] QueryTranslatorFactoryInitiator - QueryTranslatorFactory: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@5faeeb56
[DEBUG] 04-04-2022 10:17:19 [main] QueryTranslatorImpl - parse() - HQL: from models.Employee e Where e.id = :id
[DEBUG] 04-04-2022 10:17:19 [main] ErrorTracker - throwQueryException() : no errors
[DEBUG] 04-04-2022 10:17:19 [main] QueryTranslatorImpl - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'models'
    |        |  \-[IDENT] Node: 'Employee'
    |        \-[ALIAS] Node: 'e'
    \-[WHERE] Node: 'Where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'e'
          |  \-[IDENT] Node: 'id'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'id'

[DEBUG] 04-04-2022 10:17:19 [main] HqlSqlBaseWalker - select << begin [level=1, statement=select]
[DEBUG] 04-04-2022 10:17:19 [main] FromElement - FromClause{level=1} : models.Employee (e) -> employee0_
[DEBUG] 04-04-2022 10:17:19 [main] FromReferenceNode - Resolved : e -> employee0_.id
[DEBUG] 04-04-2022 10:17:19 [main] DotNode - getDataType() : id -> org.hibernate.type.IntegerType@3af9aa66
[DEBUG] 04-04-2022 10:17:19 [main] FromReferenceNode - Resolved : e.id -> employee0_.id
[DEBUG] 04-04-2022 10:17:19 [main] HqlSqlBaseWalker - select : finishing up [level=1, statement=select]
[DEBUG] 04-04-2022 10:17:19 [main] HqlSqlWalker - processQuery() :  ( SELECT ( FromClause{level=1} employee employee0_ ) ( Where ( = ( employee0_.id employee0_.id id ) ? ) ) )
[DEBUG] 04-04-2022 10:17:19 [main] HqlSqlWalker - Derived SELECT clause created.
[DEBUG] 04-04-2022 10:17:19 [main] JoinProcessor - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity Employee): [employee]
    |  +-SelectExpressionImpl
    |  | persister: SingleTableEntityPersister(models.Employee)
    |  \-SqlFragment
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-BinaryLogicOperatorNode
          +-DotNode
          | persister: SingleTableEntityPersister(models.Employee)
          | path: e.id
          |  +-IdentNode
          |  | persister: SingleTableEntityPersister(models.Employee)
          |  | originalText: e
          |  \-IdentNode
          |    persister: null
          |    originalText: id
          \-ParameterNode

[DEBUG] 04-04-2022 10:17:19 [main] JoinProcessor - Using FROM fragment [employee employee0_]
[DEBUG] 04-04-2022 10:17:19 [main] HqlSqlBaseWalker - select >> end [level=1, statement=select]
[DEBUG] 04-04-2022 10:17:19 [main] QueryTranslatorImpl - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (employee)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'employee0_.id as id1_1_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=employee,tableAlias=employee0_,origin=null,columns={,className=models.Employee}}}
    |  \-[SQL_TOKEN] SqlFragment: 'employee0_.address as address2_1_, employee0_.dept_id as dept_id6_1_, employee0_.email as email3_1_, employee0_.fullName as fullname4_1_, employee0_.phoneNumber as phonenum5_1_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[employee0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'employee employee0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=employee,tableAlias=employee0_,origin=null,columns={,className=models.Employee}}
    \-[WHERE] SqlNode: 'Where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'employee0_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=e.id,tableAlias=employee0_,className=models.Employee,classAlias=e}
          |  +-[ALIAS_REF] IdentNode: 'employee0_.id' {alias=e, className=models.Employee, tableAlias=employee0_}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[NAMED_PARAM] ParameterNode: '?' {name=id, expectedType=org.hibernate.type.IntegerType@3af9aa66}

[DEBUG] 04-04-2022 10:17:19 [main] ErrorTracker - throwQueryException() : no errors
[DEBUG] 04-04-2022 10:17:19 [main] QueryTranslatorImpl - HQL: from models.Employee e Where e.id = :id
[DEBUG] 04-04-2022 10:17:19 [main] QueryTranslatorImpl - SQL: select employee0_.id as id1_1_, employee0_.address as address2_1_, employee0_.dept_id as dept_id6_1_, employee0_.email as email3_1_, employee0_.fullName as fullname4_1_, employee0_.phoneNumber as phonenum5_1_ from employee employee0_ where employee0_.id=?
[DEBUG] 04-04-2022 10:17:19 [main] ErrorTracker - throwQueryException() : no errors
[DEBUG] 04-04-2022 10:17:19 [main] QueryResultsCacheImpl - Checking cached query results in region: models.Employee
[DEBUG] 04-04-2022 10:17:19 [main] QueryResultsCacheImpl - Query results were not found in cache
[DEBUG] 04-04-2022 10:17:19 [main] SQL - 
    select
        employee0_.id as id1_1_,
        employee0_.address as address2_1_,
        employee0_.dept_id as dept_id6_1_,
        employee0_.email as email3_1_,
        employee0_.fullName as fullname4_1_,
        employee0_.phoneNumber as phonenum5_1_ 
    from
        employee employee0_ 
    where
        employee0_.id=?
[DEBUG] 04-04-2022 10:17:19 [main] Loader - Result set row: 0
[DEBUG] 04-04-2022 10:17:19 [main] Loader - Result row: EntityKey[models.Employee#4]
[DEBUG] 04-04-2022 10:17:19 [main] TwoPhaseLoad - Resolving attributes for [models.Employee#4]
[DEBUG] 04-04-2022 10:17:19 [main] TwoPhaseLoad - Processing attribute `address` : value = France
[DEBUG] 04-04-2022 10:17:19 [main] TwoPhaseLoad - Attribute (`address`)  - enhanced for lazy-loading? - false
[DEBUG] 04-04-2022 10:17:19 [main] TwoPhaseLoad - Processing attribute `department` : value = 2
[DEBUG] 04-04-2022 10:17:19 [main] TwoPhaseLoad - Attribute (`department`)  - enhanced for lazy-loading? - false
[DEBUG] 04-04-2022 10:17:19 [main] SQL - 
    select
        department0_.dept_id as dept_id1_0_0_,
        department0_.dept_name as dept_nam2_0_0_ 
    from
        departments department0_ 
    where
        department0_.dept_id=?
[DEBUG] 04-04-2022 10:17:19 [main] EntityReferenceInitializerImpl - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
[DEBUG] 04-04-2022 10:17:19 [main] TwoPhaseLoad - Resolving attributes for [models.Department#2]
[DEBUG] 04-04-2022 10:17:19 [main] TwoPhaseLoad - Processing attribute `dept_name` : value = CFO
[DEBUG] 04-04-2022 10:17:19 [main] TwoPhaseLoad - Attribute (`dept_name`)  - enhanced for lazy-loading? - false
[DEBUG] 04-04-2022 10:17:19 [main] TwoPhaseLoad - Adding entity to second-level cache: [models.Department#2]
[DEBUG] 04-04-2022 10:17:19 [main] TwoPhaseLoad - Done materializing entity [models.Department#2]
[DEBUG] 04-04-2022 10:17:19 [main] AbstractLoadPlanBasedEntityLoader - Done entity load : models.Department#2
[DEBUG] 04-04-2022 10:17:19 [main] TwoPhaseLoad - Processing attribute `email` : value = cist@gmail.com
[DEBUG] 04-04-2022 10:17:19 [main] TwoPhaseLoad - Attribute (`email`)  - enhanced for lazy-loading? - false
[DEBUG] 04-04-2022 10:17:19 [main] TwoPhaseLoad - Processing attribute `fullName` : value = Ajata Chesa
[DEBUG] 04-04-2022 10:17:19 [main] TwoPhaseLoad - Attribute (`fullName`)  - enhanced for lazy-loading? - false
[DEBUG] 04-04-2022 10:17:19 [main] TwoPhaseLoad - Processing attribute `phoneNumber` : value = 0986584562
[DEBUG] 04-04-2022 10:17:19 [main] TwoPhaseLoad - Attribute (`phoneNumber`)  - enhanced for lazy-loading? - false
[DEBUG] 04-04-2022 10:17:19 [main] TwoPhaseLoad - Adding entity to second-level cache: [models.Employee#4]
[DEBUG] 04-04-2022 10:17:19 [main] TwoPhaseLoad - Done materializing entity [models.Employee#4]
[DEBUG] 04-04-2022 10:17:19 [main] QueryResultsCacheImpl - Caching query results in region: models.Employee; timestamp=6754477011623936
[DEBUG] 04-04-2022 10:17:19 [main] LogicalConnectionManagedImpl - Initiating JDBC connection release from afterTransaction
[INFO ] 04-04-2022 10:17:19 [main] EmployeeDao - --------------------------Query: [Employee{id=4, fullName='Ajata Chesa', address='France', phoneNumber='0986584562', email='cist@gmail.com', department=models.Department@25c1f5ee}]
[DEBUG] 04-04-2022 10:17:19 [main] QueryResultsCacheImpl - Checking cached query results in region: models.Employee
[DEBUG] 04-04-2022 10:17:19 [main] QueryResultsCacheImpl - Returning cached query results
[DEBUG] 04-04-2022 10:17:19 [main] LogicalConnectionManagedImpl - Initiating JDBC connection release from afterTransaction
[INFO ] 04-04-2022 10:17:19 [main] EmployeeDao - --------------------------------Query 2:[Employee{id=4, fullName='Ajata Chesa', address='France', phoneNumber='0986584562', email='cist@gmail.com', department=models.Department@25c1f5ee}]
[DEBUG] 04-04-2022 10:17:19 [main] SessionFactoryImpl - HHH000031: Closing
[DEBUG] 04-04-2022 10:17:19 [main] TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@2edb2f8b] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@6d099323]
[DEBUG] 04-04-2022 10:17:19 [main] AbstractServiceRegistryImpl - Implicitly destroying ServiceRegistry on de-registration of all child ServiceRegistries
[DEBUG] 04-04-2022 10:17:19 [main] BootstrapServiceRegistryImpl - Implicitly destroying Boot-strap registry on de-registration of all child ServiceRegistries
[DEBUG] 04-04-2022 10:17:48 [main] logging - Logging Provider: org.jboss.logging.Log4j2LoggerProvider
[DEBUG] 04-04-2022 10:17:48 [main] IntegratorServiceImpl - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
[DEBUG] 04-04-2022 10:17:48 [main] IntegratorServiceImpl - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
[DEBUG] 04-04-2022 10:17:48 [main] IntegratorServiceImpl - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
[INFO ] 04-04-2022 10:17:48 [main] Version - HHH000412: Hibernate ORM core version 5.6.7.Final
[DEBUG] 04-04-2022 10:17:48 [main] Environment - HHH000206: hibernate.properties not found
[DEBUG] 04-04-2022 10:17:48 [main] LocalXmlResourceResolver - Interpreting public/system identifier : [-//Hibernate/Hibernate Configuration DTD 3.0//EN] - [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd]
[WARN ] 04-04-2022 10:17:48 [main] deprecation - HHH90000012: Recognized obsolete hibernate namespace http://hibernate.sourceforge.net/hibernate-configuration. Use namespace http://www.hibernate.org/dtd/hibernate-configuration instead.  Support for obsolete DTD/XSD namespaces may be removed at any time.
[DEBUG] 04-04-2022 10:17:48 [main] LocalXmlResourceResolver - Recognized hibernate-configuration identifier; attempting to resolve on classpath under org/hibernate/
[DEBUG] 04-04-2022 10:17:48 [main] JaxbCfgProcessor - cfg.xml document did not define namespaces; wrapping in custom event reader to introduce namespace information
[DEBUG] 04-04-2022 10:17:48 [main] Configuration - Building session factory using internal StandardServiceRegistryBuilder
[DEBUG] 04-04-2022 10:17:48 [main] ServiceBinding - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
[DEBUG] 04-04-2022 10:17:48 [main] Configuration - Building session factory using provided StandardServiceRegistry
[DEBUG] 04-04-2022 10:17:48 [main] StrategyCreatorRegionFactoryImpl - RegionFactory impl [org.hibernate.cache.ehcache.internal.SingletonEhcacheRegionFactory] did not provide constructor accepting Properties
[DEBUG] 04-04-2022 10:17:48 [main] StrategyCreatorRegionFactoryImpl - RegionFactory impl [org.hibernate.cache.ehcache.internal.SingletonEhcacheRegionFactory] did not provide constructor accepting Properties
[WARN ] 04-04-2022 10:17:48 [main] deprecation - HHH020100: The Ehcache second-level cache provider for Hibernate is deprecated.  See https://hibernate.atlassian.net/browse/HHH-12441 for details.
[DEBUG] 04-04-2022 10:17:48 [main] RegionFactoryInitiator - Cache region factory : org.hibernate.cache.ehcache.internal.SingletonEhcacheRegionFactory
[INFO ] 04-04-2022 10:17:48 [main] Version - HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BooleanType@79c5636f
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BooleanType@79c5636f
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@79c5636f
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@757f675c
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.TrueFalseType@535b8c24
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.YesNoType@5e63cad
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.ByteType@55b5e331
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.ByteType@55b5e331
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@55b5e331
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration character -> org.hibernate.type.CharacterType@219f4597
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration char -> org.hibernate.type.CharacterType@219f4597
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@219f4597
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration short -> org.hibernate.type.ShortType@46b695ec
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration short -> org.hibernate.type.ShortType@46b695ec
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@46b695ec
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.IntegerType@3af9aa66
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration int -> org.hibernate.type.IntegerType@3af9aa66
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@3af9aa66
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration long -> org.hibernate.type.LongType@64d43929
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration long -> org.hibernate.type.LongType@64d43929
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.LongType@64d43929
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration float -> org.hibernate.type.FloatType@1e7f2e0f
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration float -> org.hibernate.type.FloatType@1e7f2e0f
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@1e7f2e0f
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration double -> org.hibernate.type.DoubleType@2516fc68
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration double -> org.hibernate.type.DoubleType@2516fc68
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@2516fc68
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@347bdeef
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@347bdeef
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@49298ce7
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@49298ce7
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration string -> org.hibernate.type.StringType@4a325eb9
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.StringType@4a325eb9
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@194152cf
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@ec50f54
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration url -> org.hibernate.type.UrlType@6c000e0c
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.UrlType@6c000e0c
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.DurationType@9ec531
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@9ec531
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration Instant -> org.hibernate.type.InstantType@4e6d7365
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@4e6d7365
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@64a896b0
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@64a896b0
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@73d6d0c
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@73d6d0c
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@1500e009
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@1500e009
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@cd7f1ae
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@cd7f1ae
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@7a356a0d
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@7a356a0d
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@22df874e
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@22df874e
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration date -> org.hibernate.type.DateType@7de4a01f
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.DateType@7de4a01f
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration time -> org.hibernate.type.TimeType@907f2b7
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@907f2b7
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.TimestampType@75699e35
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@75699e35
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@75699e35
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@1f14f20c
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.CalendarType@48e7b3d2
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@48e7b3d2
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@48e7b3d2
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@6f89f665
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.CalendarTimeType@c96a4ea
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.LocaleType@3935e9a8
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@3935e9a8
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.CurrencyType@66d57c1b
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@66d57c1b
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.TimeZoneType@697446d4
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@697446d4
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration class -> org.hibernate.type.ClassType@75504cef
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@75504cef
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@138a7441
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@138a7441
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@7e31ce0f
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BinaryType@64e92d61
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BinaryType@64e92d61
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BinaryType@64e92d61
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@79b663b3
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@79b663b3
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@79b663b3
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.RowVersionType@5649ec46
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration image -> org.hibernate.type.ImageType@4fe01805
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.CharArrayType@3e521715
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.CharArrayType@3e521715
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.CharArrayType@3e521715
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@5767b2af
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@5767b2af
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@5767b2af
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration text -> org.hibernate.type.TextType@48b0e701
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.NTextType@7fae4d4a
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BlobType@5ffc5491
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@5ffc5491
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@3bd55d8
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.ClobType@6b04acb2
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@6b04acb2
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.NClobType@30b9eadd
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@30b9eadd
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@4dd94a58
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@72be135f
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.SerializableType@27cbfddf
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration object -> org.hibernate.type.ObjectType@77bb0ab5
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@77bb0ab5
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@5488b5c5
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@4248ed58
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@712ca57b
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@4564e94b
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@54534abf
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@51745f40
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@45673f68
[DEBUG] 04-04-2022 10:17:48 [main] BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@27abb83e
[DEBUG] 04-04-2022 10:17:48 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
[DEBUG] 04-04-2022 10:17:48 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
[DEBUG] 04-04-2022 10:17:48 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
[DEBUG] 04-04-2022 10:17:48 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
[DEBUG] 04-04-2022 10:17:48 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
[DEBUG] 04-04-2022 10:17:48 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
[DEBUG] 04-04-2022 10:17:48 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
[DEBUG] 04-04-2022 10:17:48 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
[DEBUG] 04-04-2022 10:17:48 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
[DEBUG] 04-04-2022 10:17:48 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
[DEBUG] 04-04-2022 10:17:48 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
[DEBUG] 04-04-2022 10:17:48 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
[DEBUG] 04-04-2022 10:17:48 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
[DEBUG] 04-04-2022 10:17:48 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
[INFO ] 04-04-2022 10:17:48 [main] C3P0ConnectionProvider - HHH010002: C3P0 using driver: com.mysql.cj.jdbc.Driver at URL: jdbc:mysql://localhost:3306/employee
[INFO ] 04-04-2022 10:17:48 [main] C3P0ConnectionProvider - HHH10001001: Connection properties: {password=****, user=root}
[INFO ] 04-04-2022 10:17:48 [main] C3P0ConnectionProvider - HHH10001003: Autocommit mode: false
[INFO ] 04-04-2022 10:17:48 [main] C3P0ConnectionProvider - HHH10001007: JDBC isolation level: <unknown>
[DEBUG] 04-04-2022 10:17:48 [main] JdbcEnvironmentInitiator - Database ->
       name : MySQL
    version : 5.5.5-10.4.22-MariaDB
      major : 5
      minor : 5
[DEBUG] 04-04-2022 10:17:48 [main] JdbcEnvironmentInitiator - Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.19 (Revision: a0ca826f5cdf51a98356fdfb1bf251eb042f80bf)
      major : 8
      minor : 0
[DEBUG] 04-04-2022 10:17:48 [main] JdbcEnvironmentInitiator - JDBC version : 4.2
[INFO ] 04-04-2022 10:17:48 [main] Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQLDialect
[DEBUG] 04-04-2022 10:17:48 [main] IdentifierHelperBuilder - JDBC driver metadata reported database stores quoted identifiers in more than one case
[DEBUG] 04-04-2022 10:17:48 [main] IdentifierHelperBuilder - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
[DEBUG] 04-04-2022 10:17:48 [main] TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@301aa982] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@5fc930f0]
[DEBUG] 04-04-2022 10:17:48 [main] Namespace - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
[DEBUG] 04-04-2022 10:17:48 [main] AnnotationBinder - Binding entity from annotated class: models.Employee
[DEBUG] 04-04-2022 10:17:48 [main] Ejb3Column - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
[DEBUG] 04-04-2022 10:17:48 [main] EntityBinder - Import with entity name Employee
[DEBUG] 04-04-2022 10:17:48 [main] EntityBinder - Bind entity models.Employee on table employee
[DEBUG] 04-04-2022 10:17:48 [main] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(employee), mappingColumn=id, insertable=true, updatable=true, unique=false}
[DEBUG] 04-04-2022 10:17:48 [main] ClassLoaderAccessImpl - Not known whether passed class name [models.Employee] is safe
[DEBUG] 04-04-2022 10:17:48 [main] ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : models.Employee
[DEBUG] 04-04-2022 10:17:48 [main] PropertyBinder - MetadataSourceProcessor property id with lazy=false
[DEBUG] 04-04-2022 10:17:48 [main] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [models.Employee:id]
[DEBUG] 04-04-2022 10:17:48 [main] SimpleValueBinder - building SimpleValue for id
[DEBUG] 04-04-2022 10:17:48 [main] PropertyBinder - Building property id
[DEBUG] 04-04-2022 10:17:48 [main] BinderHelper - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
[DEBUG] 04-04-2022 10:17:48 [main] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(employee), mappingColumn=address, insertable=true, updatable=true, unique=false}
[DEBUG] 04-04-2022 10:17:48 [main] PropertyBinder - MetadataSourceProcessor property address with lazy=false
[DEBUG] 04-04-2022 10:17:48 [main] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [models.Employee:address]
[DEBUG] 04-04-2022 10:17:48 [main] SimpleValueBinder - building SimpleValue for address
[DEBUG] 04-04-2022 10:17:48 [main] PropertyBinder - Building property address
[DEBUG] 04-04-2022 10:17:48 [main] Ejb3Column - Binding column: Ejb3JoinColumn{logicalColumnName='dept_id', referencedColumn='', mappedBy=''}
[DEBUG] 04-04-2022 10:17:48 [main] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(employee), mappingColumn=department, insertable=true, updatable=true, unique=false}
[DEBUG] 04-04-2022 10:17:48 [main] PropertyBinder - Building property department
[DEBUG] 04-04-2022 10:17:48 [main] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(employee), mappingColumn=email, insertable=true, updatable=true, unique=false}
[DEBUG] 04-04-2022 10:17:48 [main] PropertyBinder - MetadataSourceProcessor property email with lazy=false
[DEBUG] 04-04-2022 10:17:48 [main] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [models.Employee:email]
[DEBUG] 04-04-2022 10:17:48 [main] SimpleValueBinder - building SimpleValue for email
[DEBUG] 04-04-2022 10:17:48 [main] PropertyBinder - Building property email
[DEBUG] 04-04-2022 10:17:48 [main] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(employee), mappingColumn=fullName, insertable=true, updatable=true, unique=false}
[DEBUG] 04-04-2022 10:17:48 [main] PropertyBinder - MetadataSourceProcessor property fullName with lazy=false
[DEBUG] 04-04-2022 10:17:48 [main] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [models.Employee:fullName]
[DEBUG] 04-04-2022 10:17:48 [main] SimpleValueBinder - building SimpleValue for fullName
[DEBUG] 04-04-2022 10:17:48 [main] PropertyBinder - Building property fullName
[DEBUG] 04-04-2022 10:17:48 [main] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(employee), mappingColumn=phoneNumber, insertable=true, updatable=true, unique=false}
[DEBUG] 04-04-2022 10:17:48 [main] PropertyBinder - MetadataSourceProcessor property phoneNumber with lazy=false
[DEBUG] 04-04-2022 10:17:48 [main] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [models.Employee:phoneNumber]
[DEBUG] 04-04-2022 10:17:48 [main] SimpleValueBinder - building SimpleValue for phoneNumber
[DEBUG] 04-04-2022 10:17:48 [main] PropertyBinder - Building property phoneNumber
[DEBUG] 04-04-2022 10:17:48 [main] AnnotationBinder - Binding entity from annotated class: models.Department
[DEBUG] 04-04-2022 10:17:48 [main] Ejb3Column - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
[DEBUG] 04-04-2022 10:17:48 [main] EntityBinder - Import with entity name Department
[DEBUG] 04-04-2022 10:17:48 [main] EntityBinder - Bind entity models.Department on table departments
[DEBUG] 04-04-2022 10:17:48 [main] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(departments), mappingColumn=dept_id, insertable=true, updatable=true, unique=false}
[DEBUG] 04-04-2022 10:17:48 [main] ClassLoaderAccessImpl - Not known whether passed class name [models.Department] is safe
[DEBUG] 04-04-2022 10:17:48 [main] ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : models.Department
[DEBUG] 04-04-2022 10:17:48 [main] PropertyBinder - MetadataSourceProcessor property dept_id with lazy=false
[DEBUG] 04-04-2022 10:17:48 [main] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [models.Department:dept_id]
[DEBUG] 04-04-2022 10:17:48 [main] SimpleValueBinder - building SimpleValue for dept_id
[DEBUG] 04-04-2022 10:17:48 [main] PropertyBinder - Building property dept_id
[DEBUG] 04-04-2022 10:17:48 [main] BinderHelper - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(dept_id)]), dept_id, identity, , ...)
[DEBUG] 04-04-2022 10:17:48 [main] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(departments), mappingColumn=dept_name, insertable=true, updatable=true, unique=false}
[DEBUG] 04-04-2022 10:17:48 [main] PropertyBinder - MetadataSourceProcessor property dept_name with lazy=false
[DEBUG] 04-04-2022 10:17:48 [main] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [models.Department:dept_name]
[DEBUG] 04-04-2022 10:17:48 [main] SimpleValueBinder - building SimpleValue for dept_name
[DEBUG] 04-04-2022 10:17:48 [main] PropertyBinder - Building property dept_name
[DEBUG] 04-04-2022 10:17:48 [main] SimpleValueBinder - Starting fillSimpleValue for id
[DEBUG] 04-04-2022 10:17:48 [main] SimpleValueBinder - Starting fillSimpleValue for address
[DEBUG] 04-04-2022 10:17:48 [main] SimpleValueBinder - Starting fillSimpleValue for email
[DEBUG] 04-04-2022 10:17:48 [main] SimpleValueBinder - Starting fillSimpleValue for fullName
[DEBUG] 04-04-2022 10:17:48 [main] SimpleValueBinder - Starting fillSimpleValue for phoneNumber
[DEBUG] 04-04-2022 10:17:48 [main] SimpleValueBinder - Starting fillSimpleValue for dept_id
[DEBUG] 04-04-2022 10:17:48 [main] SimpleValueBinder - Starting fillSimpleValue for dept_name
[DEBUG] 04-04-2022 10:17:48 [main] PrimaryKey - Forcing column [id] to be non-null as it is part of the primary key for table [employee]
[DEBUG] 04-04-2022 10:17:48 [main] PrimaryKey - Forcing column [dept_id] to be non-null as it is part of the primary key for table [departments]
[DEBUG] 04-04-2022 10:17:48 [main] InFlightMetadataCollectorImpl - Resolving reference to class: models.Department
[DEBUG] 04-04-2022 10:17:48 [main] InFlightMetadataCollectorImpl - Resolving reference to class: models.Department
[DEBUG] 04-04-2022 10:17:48 [main] SessionFactoryImpl - Building session factory
[DEBUG] 04-04-2022 10:17:48 [main] Settings - SessionFactory name : null
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Automatic flush during beforeCompletion(): enabled
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Automatic session close at end of transaction: disabled
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Statistics: disabled
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Deleted entity synthetic identifier rollback: disabled
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Default entity-mode: pojo
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Allow initialization of lazy state outside session : disabled
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Using BatchFetchStyle : LEGACY
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Default batch fetch size: -1
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Maximum outer join fetch depth: 2
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Default null ordering: NONE
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Order SQL updates by primary key: disabled
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Order SQL inserts for batching: disabled
[DEBUG] 04-04-2022 10:17:48 [main] Settings - multi-tenancy strategy : NONE
[DEBUG] 04-04-2022 10:17:48 [main] Settings - JTA Track by Thread: enabled
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Query language substitutions: {}
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Named query checking : enabled
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Second-level cache: enabled
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Second-level query cache: enabled
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Second-level query cache factory: org.hibernate.cache.internal.StandardTimestampsCacheFactory@475646d4
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Second-level cache region prefix: null
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Optimize second-level cache for minimal puts: disabled
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Structured second-level cache entries: disabled
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Second-level cache direct-reference entries: disabled
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Automatic eviction of collection cache: disabled
[DEBUG] 04-04-2022 10:17:48 [main] Settings - JDBC batch size: 15
[DEBUG] 04-04-2022 10:17:48 [main] Settings - JDBC batch updates for versioned data: enabled
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Scrollable result sets: enabled
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Wrap result sets: disabled
[DEBUG] 04-04-2022 10:17:48 [main] Settings - JDBC3 getGeneratedKeys(): enabled
[DEBUG] 04-04-2022 10:17:48 [main] Settings - JDBC result set fetch size: null
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Connection release mode: AFTER_TRANSACTION
[DEBUG] 04-04-2022 10:17:48 [main] Settings - Generate SQL with comments: disabled
[DEBUG] 04-04-2022 10:17:48 [main] Settings - JPA compliance - query : disabled
[DEBUG] 04-04-2022 10:17:48 [main] Settings - JPA compliance - closed-handling : disabled
[DEBUG] 04-04-2022 10:17:48 [main] Settings - JPA compliance - lists : disabled
[DEBUG] 04-04-2022 10:17:48 [main] Settings - JPA compliance - transactions : disabled
[DEBUG] 04-04-2022 10:17:48 [main] SessionFactoryServiceRegistryImpl - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
[DEBUG] 04-04-2022 10:17:48 [main] SessionFactoryServiceRegistryImpl - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
[DEBUG] 04-04-2022 10:17:48 [main] SingletonEhcacheRegionFactory - prepending / to /ehcache.xml. It should be placed in the root of the classpath rather than in a package.
[DEBUG] 04-04-2022 10:17:48 [main] ehcache - Creating EhCacheRegionFactory from a specified resource: /ehcache.xml.  Resolved to URL: file:/D:/MyMaven/Hibernate/target/classes/ehcache.xml
[WARN ] 04-04-2022 10:17:49 [main] cache - HHH90001006: Missing cache[default-update-timestamps-region] was created on-the-fly. The created cache will use a provider-specific default configuration: make sure you defined one. You can disable this warning by setting 'hibernate.cache.ehcache.missing_cache_strategy' to 'create'.
[WARN ] 04-04-2022 10:17:49 [main] cache - HHH90001007: Using legacy cache name [org.hibernate.cache.internal.StandardQueryCache] because configuration could not be found for cache [default-query-results-region]. Update your configuration to rename cache [org.hibernate.cache.internal.StandardQueryCache] to [default-query-results-region].
[DEBUG] 04-04-2022 10:17:49 [main] SessionFactoryImpl - Session factory constructed with filter configurations : {}
[DEBUG] 04-04-2022 10:17:49 [main] SessionFactoryImpl - Instantiating session factory with properties: {hibernate.format_sql=true, java.specification.version=17, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, hibernate.dialect=org.hibernate.dialect.MySQLDialect, hibernate.c3p0.min_size=5, java.class.path=D:\MyMaven\Hibernate\target\classes;C:\Users\dtson1.TMA\.m2\repository\javax\servlet\jstl\1.2\jstl-1.2.jar;C:\Users\dtson1.TMA\.m2\repository\mysql\mysql-connector-java\8.0.19\mysql-connector-java-8.0.19.jar;C:\Users\dtson1.TMA\.m2\repository\org\hibernate\hibernate-c3p0\5.6.7.Final\hibernate-c3p0-5.6.7.Final.jar;C:\Users\dtson1.TMA\.m2\repository\org\jboss\logging\jboss-logging\3.4.3.Final\jboss-logging-3.4.3.Final.jar;C:\Users\dtson1.TMA\.m2\repository\com\mchange\c3p0\0.9.5.5\c3p0-0.9.5.5.jar;C:\Users\dtson1.TMA\.m2\repository\com\mchange\mchange-commons-java\0.2.19\mchange-commons-java-0.2.19.jar;C:\Users\dtson1.TMA\.m2\repository\org\apache\logging\log4j\log4j-api\2.17.2\log4j-api-2.17.2.jar;C:\Users\dtson1.TMA\.m2\repository\org\apache\logging\log4j\log4j-core\2.17.2\log4j-core-2.17.2.jar;C:\Users\dtson1.TMA\.m2\repository\org\hibernate\hibernate-core\5.6.7.Final\hibernate-core-5.6.7.Final.jar;C:\Users\dtson1.TMA\.m2\repository\javax\persistence\javax.persistence-api\2.2\javax.persistence-api-2.2.jar;C:\Users\dtson1.TMA\.m2\repository\net\bytebuddy\byte-buddy\1.12.8\byte-buddy-1.12.8.jar;C:\Users\dtson1.TMA\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\dtson1.TMA\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.1.1.Final\jboss-transaction-api_1.2_spec-1.1.1.Final.jar;C:\Users\dtson1.TMA\.m2\repository\org\jboss\jandex\2.4.2.Final\jandex-2.4.2.Final.jar;C:\Users\dtson1.TMA\.m2\repository\com\fasterxml\classmate\1.5.1\classmate-1.5.1.jar;C:\Users\dtson1.TMA\.m2\repository\javax\activation\javax.activation-api\1.2.0\javax.activation-api-1.2.0.jar;C:\Users\dtson1.TMA\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.1.2.Final\hibernate-commons-annotations-5.1.2.Final.jar;C:\Users\dtson1.TMA\.m2\repository\javax\xml\bind\jaxb-api\2.3.1\jaxb-api-2.3.1.jar;C:\Users\dtson1.TMA\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.1\jaxb-runtime-2.3.1.jar;C:\Users\dtson1.TMA\.m2\repository\org\glassfish\jaxb\txw2\2.3.1\txw2-2.3.1.jar;C:\Users\dtson1.TMA\.m2\repository\com\sun\istack\istack-commons-runtime\3.0.7\istack-commons-runtime-3.0.7.jar;C:\Users\dtson1.TMA\.m2\repository\org\jvnet\staxex\stax-ex\1.8\stax-ex-1.8.jar;C:\Users\dtson1.TMA\.m2\repository\com\sun\xml\fastinfoset\FastInfoset\1.2.15\FastInfoset-1.2.15.jar;C:\Users\dtson1.TMA\.m2\repository\org\ehcache\ehcache\3.0.0\ehcache-3.0.0.jar;C:\Users\dtson1.TMA\.m2\repository\org\hibernate\hibernate-ehcache\5.6.7.Final\hibernate-ehcache-5.6.7.Final.jar;C:\Users\dtson1.TMA\.m2\repository\net\sf\ehcache\ehcache\2.10.6\ehcache-2.10.6.jar;C:\Users\dtson1.TMA\.m2\repository\org\slf4j\slf4j-simple\2.0.0-alpha7\slf4j-simple-2.0.0-alpha7.jar;C:\Users\dtson1.TMA\.m2\repository\org\slf4j\slf4j-api\2.0.0-alpha7\slf4j-api-2.0.0-alpha7.jar, net.sf.ehcache.configurationResourceName=ehcache.xml, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, hbm2ddl.auto=update, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Asia/Bangkok, java.vm.specification.version=17, os.name=Windows 10, current_session_context_class=thread, cache.use_query_cache=true, sun.java.launcher=SUN_STANDARD, user.country=US, sun.boot.library.path=C:\Users\dtson1.TMA\.jdks\openjdk-17.0.2\bin, sun.java.command=dao.EmployeeDao, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\dtson1.TMA, hibernate.c3p0.max_statements=50, user.language=en, java.specification.vendor=Oracle Corporation, java.version.date=2022-01-18, java.home=C:\Users\dtson1.TMA\.jdks\openjdk-17.0.2, file.separator=\, java.vm.compressedOopsMode=Zero based, line.separator=
, hibernate.c3p0.timeout=180, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory, hibernate.hbm2ddl.auto=update, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, hibernate.c3p0.max_size=200, java.runtime.version=17.0.2+8-86, user.name=dtson1, hibernate.cache.use_query_cache=true, path.separator=;, hibernate.net.sf.ehcache.configurationResourceName=ehcache.xml, hibernate.connection.username=****, os.version=10.0, java.runtime.name=OpenJDK Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost:3306/employee, file.encoding=UTF-8, format_sql=true, java.vm.name=OpenJDK 64-Bit Server VM, hibernate.show_sql=true, hibernate.current_session_context_class=thread, show_sql=true, hibernate.connection.driver_class=com.mysql.cj.jdbc.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=C:\Users\dtson1.TMA\AppData\Local\Temp\, java.version=17.0.2, user.dir=D:\MyMaven\Hibernate, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@72503b19, native.encoding=Cp1252, hibernate.cache.use_second_level_cache=true, java.library.path=C:\Users\dtson1.TMA\.jdks\openjdk-17.0.2\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files\Eclipse Adoptium\jdk-11.0.14.101-hotspot\bin;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Program Files\nodejs\;C:\Users\dtson1.TMA\AppData\Local\Microsoft\WindowsApps;;C:\Users\dtson1.TMA\AppData\Local\Programs\Microsoft VS Code\bin;C:\Program Files\JetBrains\IntelliJ IDEA 2021.3.2\bin;;., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.2+8-86, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, java.class.version=61.0}
[DEBUG] 04-04-2022 10:17:49 [main] JaccIntegrator - Skipping JACC integration as it was not enabled
[DEBUG] 04-04-2022 10:17:49 [main] SessionFactoryImpl - Instantiated session factory
[DEBUG] 04-04-2022 10:17:49 [main] TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@301aa982] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@bc6288b]
[WARN ] 04-04-2022 10:17:49 [main] cache - HHH90001006: Missing cache[models.Department] was created on-the-fly. The created cache will use a provider-specific default configuration: make sure you defined one. You can disable this warning by setting 'hibernate.cache.ehcache.missing_cache_strategy' to 'create'.
[DEBUG] 04-04-2022 10:17:49 [main] DomainDataRegionTemplate - Generating entity cache access [read-only] : NavigableRole[models.Department]
[WARN ] 04-04-2022 10:17:49 [main] cache - HHH90001003: Read-only caching was requested for mutable entity [NavigableRole[models.Department]]
[WARN ] 04-04-2022 10:17:49 [main] cache - HHH90001006: Missing cache[models.Employee] was created on-the-fly. The created cache will use a provider-specific default configuration: make sure you defined one. You can disable this warning by setting 'hibernate.cache.ehcache.missing_cache_strategy' to 'create'.
[DEBUG] 04-04-2022 10:17:49 [main] DomainDataRegionTemplate - Generating entity cache access [read-only] : NavigableRole[models.Employee]
[WARN ] 04-04-2022 10:17:49 [main] cache - HHH90001003: Read-only caching was requested for mutable entity [NavigableRole[models.Employee]]
[DEBUG] 04-04-2022 10:17:49 [main] ClassLoaderAccessImpl - Not known whether passed class name [models.Department] is safe
[DEBUG] 04-04-2022 10:17:49 [main] ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : models.Department
[DEBUG] 04-04-2022 10:17:49 [main] interceptor - To-one property `models.Employee#department` was mapped with LAZY + NO_PROXY but the class was not enhanced
[DEBUG] 04-04-2022 10:17:49 [main] interceptor - To-one property `models.Employee#department` was mapped with LAZY + NO_PROXY but the class was not enhanced
[DEBUG] 04-04-2022 10:17:49 [main] ClassLoaderAccessImpl - Not known whether passed class name [models.Employee] is safe
[DEBUG] 04-04-2022 10:17:49 [main] ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : models.Employee
[DEBUG] 04-04-2022 10:17:49 [main] interceptor - To-one property `models.Employee#department` was mapped with LAZY + NO_PROXY but the class was not enhanced
[DEBUG] 04-04-2022 10:17:49 [main] interceptor - To-one property `models.Employee#department` was mapped with LAZY + NO_PROXY but the class was not enhanced
[DEBUG] 04-04-2022 10:17:49 [main] AbstractEntityPersister - Static SQL for entity: models.Department
[DEBUG] 04-04-2022 10:17:49 [main] AbstractEntityPersister -  Version select: select dept_id from departments where dept_id =?
[DEBUG] 04-04-2022 10:17:49 [main] AbstractEntityPersister -  Snapshot select: select department_.dept_id, department_.dept_name as dept_nam2_0_ from departments department_ where department_.dept_id=?
[DEBUG] 04-04-2022 10:17:49 [main] AbstractEntityPersister -  Insert 0: insert into departments (dept_name, dept_id) values (?, ?)
[DEBUG] 04-04-2022 10:17:49 [main] AbstractEntityPersister -  Update 0: update departments set dept_name=? where dept_id=?
[DEBUG] 04-04-2022 10:17:49 [main] AbstractEntityPersister -  Delete 0: delete from departments where dept_id=?
[DEBUG] 04-04-2022 10:17:49 [main] AbstractEntityPersister -  Identity insert: insert into departments (dept_name) values (?)
[DEBUG] 04-04-2022 10:17:49 [main] QuerySpacesImpl - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@467045c4]
[DEBUG] 04-04-2022 10:17:49 [main] MetamodelGraphWalker - Visiting attribute path : dept_name
[DEBUG] 04-04-2022 10:17:49 [main] FetchStyleLoadPlanBuildingAssociationVisitationStrategy - Building LoadPlan...
[DEBUG] 04-04-2022 10:17:49 [main] LoadQueryJoinAndFetchProcessor - processing queryspace <gen:0>
[DEBUG] 04-04-2022 10:17:49 [main] LoadPlanTreePrinter - LoadPlan(entity=models.Department)
    - Returns
       - EntityReturnImpl(entity=models.Department, querySpaceUid=<gen:0>, path=models.Department)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=models.Department)
          - SQL table alias mapping - department0_
          - alias suffix - 0_
          - suffixed key columns - {dept_id1_0_0_}

[DEBUG] 04-04-2022 10:17:49 [main] EntityLoader - Static select for entity models.Department [NONE]: select department0_.dept_id as dept_id1_0_0_, department0_.dept_name as dept_nam2_0_0_ from departments department0_ where department0_.dept_id=?
[DEBUG] 04-04-2022 10:17:49 [main] AbstractEntityPersister - Static SQL for entity: models.Employee
[DEBUG] 04-04-2022 10:17:49 [main] AbstractEntityPersister -  Version select: select id from employee where id =?
[DEBUG] 04-04-2022 10:17:49 [main] AbstractEntityPersister -  Snapshot select: select employee_.id, employee_.address as address2_1_, employee_.dept_id as dept_id6_1_, employee_.email as email3_1_, employee_.fullName as fullname4_1_, employee_.phoneNumber as phonenum5_1_ from employee employee_ where employee_.id=?
[DEBUG] 04-04-2022 10:17:49 [main] AbstractEntityPersister -  Insert 0: insert into employee (address, dept_id, email, fullName, phoneNumber, id) values (?, ?, ?, ?, ?, ?)
[DEBUG] 04-04-2022 10:17:49 [main] AbstractEntityPersister -  Update 0: update employee set address=?, dept_id=?, email=?, fullName=?, phoneNumber=? where id=?
[DEBUG] 04-04-2022 10:17:49 [main] AbstractEntityPersister -  Delete 0: delete from employee where id=?
[DEBUG] 04-04-2022 10:17:49 [main] AbstractEntityPersister -  Identity insert: insert into employee (address, dept_id, email, fullName, phoneNumber) values (?, ?, ?, ?, ?)
[DEBUG] 04-04-2022 10:17:49 [main] QuerySpacesImpl - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@677ce519]
[DEBUG] 04-04-2022 10:17:49 [main] MetamodelGraphWalker - Visiting attribute path : address
[DEBUG] 04-04-2022 10:17:49 [main] MetamodelGraphWalker - Visiting attribute path : department
[DEBUG] 04-04-2022 10:17:49 [main] QuerySpacesImpl - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2fe2965c]
[DEBUG] 04-04-2022 10:17:49 [main] MetamodelGraphWalker - Visiting attribute path : department.dept_name
[DEBUG] 04-04-2022 10:17:49 [main] MetamodelGraphWalker - Visiting attribute path : email
[DEBUG] 04-04-2022 10:17:49 [main] MetamodelGraphWalker - Visiting attribute path : fullName
[DEBUG] 04-04-2022 10:17:49 [main] MetamodelGraphWalker - Visiting attribute path : phoneNumber
[DEBUG] 04-04-2022 10:17:49 [main] FetchStyleLoadPlanBuildingAssociationVisitationStrategy - Building LoadPlan...
[DEBUG] 04-04-2022 10:17:49 [main] LoadQueryJoinAndFetchProcessor - processing queryspace <gen:0>
[DEBUG] 04-04-2022 10:17:49 [main] LoadPlanTreePrinter - LoadPlan(entity=models.Employee)
    - Returns
       - EntityReturnImpl(entity=models.Employee, querySpaceUid=<gen:0>, path=models.Employee)
          - EntityAttributeFetchImpl(entity=models.Department, querySpaceUid=<gen:1>, path=models.Employee.department)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=models.Employee)
          - SQL table alias mapping - employee0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(department)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=models.Department)
                - SQL table alias mapping - department1_
                - alias suffix - 1_
                - suffixed key columns - {dept_id1_0_1_}

[DEBUG] 04-04-2022 10:17:49 [main] EntityLoader - Static select for entity models.Employee [NONE]: select employee0_.id as id1_1_0_, employee0_.address as address2_1_0_, employee0_.dept_id as dept_id6_1_0_, employee0_.email as email3_1_0_, employee0_.fullName as fullname4_1_0_, employee0_.phoneNumber as phonenum5_1_0_, department1_.dept_id as dept_id1_0_1_, department1_.dept_name as dept_nam2_0_1_ from employee employee0_ left outer join departments department1_ on employee0_.dept_id=department1_.dept_id where employee0_.id=?
[INFO ] 04-04-2022 10:17:49 [main] access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@5d71b500] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
[DEBUG] 04-04-2022 10:17:49 [main] Table - No alter strings for table : departments
[DEBUG] 04-04-2022 10:17:49 [main] Table - No alter strings for table : employee
[DEBUG] 04-04-2022 10:17:49 [main] NamedQueryRepository - Checking 0 named HQL queries
[DEBUG] 04-04-2022 10:17:49 [main] NamedQueryRepository - Checking 0 named SQL queries
[DEBUG] 04-04-2022 10:17:49 [main] SessionFactoryServiceRegistryImpl - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
[DEBUG] 04-04-2022 10:17:49 [main] SessionFactoryRegistry - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@6d69a0d3
[DEBUG] 04-04-2022 10:17:49 [main] SessionFactoryRegistry - Registering SessionFactory: 30b7b60f-409d-4da3-96cd-e128795ffb02 (<unnamed>)
[DEBUG] 04-04-2022 10:17:49 [main] SessionFactoryRegistry - Not binding SessionFactory to JNDI, no JNDI name configured
[DEBUG] 04-04-2022 10:17:49 [main] StatisticsInitiator - Statistics initialized [enabled=false]
[DEBUG] 04-04-2022 10:17:49 [main] QueryTranslatorFactoryInitiator - QueryTranslatorFactory: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@13278a41
[DEBUG] 04-04-2022 10:17:49 [main] QueryTranslatorImpl - parse() - HQL: from models.Employee e Where e.id = :id
[DEBUG] 04-04-2022 10:17:49 [main] ErrorTracker - throwQueryException() : no errors
[DEBUG] 04-04-2022 10:17:49 [main] QueryTranslatorImpl - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'models'
    |        |  \-[IDENT] Node: 'Employee'
    |        \-[ALIAS] Node: 'e'
    \-[WHERE] Node: 'Where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'e'
          |  \-[IDENT] Node: 'id'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'id'

[DEBUG] 04-04-2022 10:17:49 [main] HqlSqlBaseWalker - select << begin [level=1, statement=select]
[DEBUG] 04-04-2022 10:17:49 [main] FromElement - FromClause{level=1} : models.Employee (e) -> employee0_
[DEBUG] 04-04-2022 10:17:49 [main] FromReferenceNode - Resolved : e -> employee0_.id
[DEBUG] 04-04-2022 10:17:49 [main] DotNode - getDataType() : id -> org.hibernate.type.IntegerType@3af9aa66
[DEBUG] 04-04-2022 10:17:49 [main] FromReferenceNode - Resolved : e.id -> employee0_.id
[DEBUG] 04-04-2022 10:17:49 [main] HqlSqlBaseWalker - select : finishing up [level=1, statement=select]
[DEBUG] 04-04-2022 10:17:49 [main] HqlSqlWalker - processQuery() :  ( SELECT ( FromClause{level=1} employee employee0_ ) ( Where ( = ( employee0_.id employee0_.id id ) ? ) ) )
[DEBUG] 04-04-2022 10:17:49 [main] HqlSqlWalker - Derived SELECT clause created.
[DEBUG] 04-04-2022 10:17:49 [main] JoinProcessor - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity Employee): [employee]
    |  +-SelectExpressionImpl
    |  | persister: SingleTableEntityPersister(models.Employee)
    |  \-SqlFragment
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-BinaryLogicOperatorNode
          +-DotNode
          | persister: SingleTableEntityPersister(models.Employee)
          | path: e.id
          |  +-IdentNode
          |  | persister: SingleTableEntityPersister(models.Employee)
          |  | originalText: e
          |  \-IdentNode
          |    persister: null
          |    originalText: id
          \-ParameterNode

[DEBUG] 04-04-2022 10:17:49 [main] JoinProcessor - Using FROM fragment [employee employee0_]
[DEBUG] 04-04-2022 10:17:49 [main] HqlSqlBaseWalker - select >> end [level=1, statement=select]
[DEBUG] 04-04-2022 10:17:49 [main] QueryTranslatorImpl - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (employee)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'employee0_.id as id1_1_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=employee,tableAlias=employee0_,origin=null,columns={,className=models.Employee}}}
    |  \-[SQL_TOKEN] SqlFragment: 'employee0_.address as address2_1_, employee0_.dept_id as dept_id6_1_, employee0_.email as email3_1_, employee0_.fullName as fullname4_1_, employee0_.phoneNumber as phonenum5_1_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[employee0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'employee employee0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=employee,tableAlias=employee0_,origin=null,columns={,className=models.Employee}}
    \-[WHERE] SqlNode: 'Where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'employee0_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=e.id,tableAlias=employee0_,className=models.Employee,classAlias=e}
          |  +-[ALIAS_REF] IdentNode: 'employee0_.id' {alias=e, className=models.Employee, tableAlias=employee0_}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[NAMED_PARAM] ParameterNode: '?' {name=id, expectedType=org.hibernate.type.IntegerType@3af9aa66}

[DEBUG] 04-04-2022 10:17:49 [main] ErrorTracker - throwQueryException() : no errors
[DEBUG] 04-04-2022 10:17:49 [main] QueryTranslatorImpl - HQL: from models.Employee e Where e.id = :id
[DEBUG] 04-04-2022 10:17:49 [main] QueryTranslatorImpl - SQL: select employee0_.id as id1_1_, employee0_.address as address2_1_, employee0_.dept_id as dept_id6_1_, employee0_.email as email3_1_, employee0_.fullName as fullname4_1_, employee0_.phoneNumber as phonenum5_1_ from employee employee0_ where employee0_.id=?
[DEBUG] 04-04-2022 10:17:49 [main] ErrorTracker - throwQueryException() : no errors
[DEBUG] 04-04-2022 10:17:49 [main] QueryResultsCacheImpl - Checking cached query results in region: models.Employee
[DEBUG] 04-04-2022 10:17:49 [main] QueryResultsCacheImpl - Query results were not found in cache
[DEBUG] 04-04-2022 10:17:49 [main] SQL - 
    select
        employee0_.id as id1_1_,
        employee0_.address as address2_1_,
        employee0_.dept_id as dept_id6_1_,
        employee0_.email as email3_1_,
        employee0_.fullName as fullname4_1_,
        employee0_.phoneNumber as phonenum5_1_ 
    from
        employee employee0_ 
    where
        employee0_.id=?
[DEBUG] 04-04-2022 10:17:49 [main] Loader - Result set row: 0
[DEBUG] 04-04-2022 10:17:49 [main] Loader - Result row: EntityKey[models.Employee#4]
[DEBUG] 04-04-2022 10:17:49 [main] TwoPhaseLoad - Resolving attributes for [models.Employee#4]
[DEBUG] 04-04-2022 10:17:49 [main] TwoPhaseLoad - Processing attribute `address` : value = France
[DEBUG] 04-04-2022 10:17:49 [main] TwoPhaseLoad - Attribute (`address`)  - enhanced for lazy-loading? - false
[DEBUG] 04-04-2022 10:17:49 [main] TwoPhaseLoad - Processing attribute `department` : value = 2
[DEBUG] 04-04-2022 10:17:49 [main] TwoPhaseLoad - Attribute (`department`)  - enhanced for lazy-loading? - false
[DEBUG] 04-04-2022 10:17:49 [main] SQL - 
    select
        department0_.dept_id as dept_id1_0_0_,
        department0_.dept_name as dept_nam2_0_0_ 
    from
        departments department0_ 
    where
        department0_.dept_id=?
[DEBUG] 04-04-2022 10:17:49 [main] EntityReferenceInitializerImpl - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
[DEBUG] 04-04-2022 10:17:49 [main] TwoPhaseLoad - Resolving attributes for [models.Department#2]
[DEBUG] 04-04-2022 10:17:49 [main] TwoPhaseLoad - Processing attribute `dept_name` : value = CFO
[DEBUG] 04-04-2022 10:17:49 [main] TwoPhaseLoad - Attribute (`dept_name`)  - enhanced for lazy-loading? - false
[DEBUG] 04-04-2022 10:17:49 [main] TwoPhaseLoad - Adding entity to second-level cache: [models.Department#2]
[DEBUG] 04-04-2022 10:17:49 [main] TwoPhaseLoad - Done materializing entity [models.Department#2]
[DEBUG] 04-04-2022 10:17:49 [main] AbstractLoadPlanBasedEntityLoader - Done entity load : models.Department#2
[DEBUG] 04-04-2022 10:17:49 [main] TwoPhaseLoad - Processing attribute `email` : value = cist@gmail.com
[DEBUG] 04-04-2022 10:17:49 [main] TwoPhaseLoad - Attribute (`email`)  - enhanced for lazy-loading? - false
[DEBUG] 04-04-2022 10:17:49 [main] TwoPhaseLoad - Processing attribute `fullName` : value = Ajata Chesa
[DEBUG] 04-04-2022 10:17:49 [main] TwoPhaseLoad - Attribute (`fullName`)  - enhanced for lazy-loading? - false
[DEBUG] 04-04-2022 10:17:49 [main] TwoPhaseLoad - Processing attribute `phoneNumber` : value = 0986584562
[DEBUG] 04-04-2022 10:17:49 [main] TwoPhaseLoad - Attribute (`phoneNumber`)  - enhanced for lazy-loading? - false
[DEBUG] 04-04-2022 10:17:49 [main] TwoPhaseLoad - Adding entity to second-level cache: [models.Employee#4]
[DEBUG] 04-04-2022 10:17:49 [main] TwoPhaseLoad - Done materializing entity [models.Employee#4]
[DEBUG] 04-04-2022 10:17:49 [main] QueryResultsCacheImpl - Caching query results in region: models.Employee; timestamp=6754477136453632
[DEBUG] 04-04-2022 10:17:49 [main] LogicalConnectionManagedImpl - Initiating JDBC connection release from afterTransaction
[INFO ] 04-04-2022 10:17:49 [main] EmployeeDao - --------------------------Query: [Employee{id=4, fullName='Ajata Chesa', address='France', phoneNumber='0986584562', email='cist@gmail.com', department=models.Department@61b838f2}]
[DEBUG] 04-04-2022 10:17:49 [main] QueryResultsCacheImpl - Checking cached query results in region: models.Employee
[DEBUG] 04-04-2022 10:17:49 [main] QueryResultsCacheImpl - Returning cached query results
[DEBUG] 04-04-2022 10:17:49 [main] LogicalConnectionManagedImpl - Initiating JDBC connection release from afterTransaction
[INFO ] 04-04-2022 10:17:49 [main] EmployeeDao - --------------------------------Query 2:[Employee{id=4, fullName='Ajata Chesa', address='France', phoneNumber='0986584562', email='cist@gmail.com', department=models.Department@61b838f2}]
[DEBUG] 04-04-2022 10:17:49 [main] SessionFactoryImpl - HHH000031: Closing
[DEBUG] 04-04-2022 10:17:49 [main] TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@57e03347] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@bc6288b]
[DEBUG] 04-04-2022 10:17:49 [main] AbstractServiceRegistryImpl - Implicitly destroying ServiceRegistry on de-registration of all child ServiceRegistries
[DEBUG] 04-04-2022 10:17:49 [main] BootstrapServiceRegistryImpl - Implicitly destroying Boot-strap registry on de-registration of all child ServiceRegistries
[DEBUG] 04-04-2022 10:26:50 [main] logging - Logging Provider: org.jboss.logging.Log4j2LoggerProvider
[DEBUG] 04-04-2022 10:26:50 [main] IntegratorServiceImpl - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
[DEBUG] 04-04-2022 10:26:50 [main] IntegratorServiceImpl - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
[DEBUG] 04-04-2022 10:26:50 [main] IntegratorServiceImpl - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
[INFO ] 04-04-2022 10:26:51 [main] Version - HHH000412: Hibernate ORM core version 5.6.7.Final
[DEBUG] 04-04-2022 10:26:51 [main] Environment - HHH000206: hibernate.properties not found
[DEBUG] 04-04-2022 10:26:51 [main] LocalXmlResourceResolver - Interpreting public/system identifier : [-//Hibernate/Hibernate Configuration DTD 3.0//EN] - [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd]
[WARN ] 04-04-2022 10:26:51 [main] deprecation - HHH90000012: Recognized obsolete hibernate namespace http://hibernate.sourceforge.net/hibernate-configuration. Use namespace http://www.hibernate.org/dtd/hibernate-configuration instead.  Support for obsolete DTD/XSD namespaces may be removed at any time.
[DEBUG] 04-04-2022 10:26:51 [main] LocalXmlResourceResolver - Recognized hibernate-configuration identifier; attempting to resolve on classpath under org/hibernate/
[DEBUG] 04-04-2022 10:26:51 [main] JaxbCfgProcessor - cfg.xml document did not define namespaces; wrapping in custom event reader to introduce namespace information
[DEBUG] 04-04-2022 10:26:51 [main] Configuration - Building session factory using internal StandardServiceRegistryBuilder
[DEBUG] 04-04-2022 10:26:51 [main] ServiceBinding - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
[DEBUG] 04-04-2022 10:26:51 [main] Configuration - Building session factory using provided StandardServiceRegistry
[DEBUG] 04-04-2022 10:26:51 [main] StrategyCreatorRegionFactoryImpl - RegionFactory impl [org.hibernate.cache.ehcache.internal.SingletonEhcacheRegionFactory] did not provide constructor accepting Properties
[DEBUG] 04-04-2022 10:26:51 [main] StrategyCreatorRegionFactoryImpl - RegionFactory impl [org.hibernate.cache.ehcache.internal.SingletonEhcacheRegionFactory] did not provide constructor accepting Properties
[WARN ] 04-04-2022 10:26:51 [main] deprecation - HHH020100: The Ehcache second-level cache provider for Hibernate is deprecated.  See https://hibernate.atlassian.net/browse/HHH-12441 for details.
[DEBUG] 04-04-2022 10:26:51 [main] RegionFactoryInitiator - Cache region factory : org.hibernate.cache.ehcache.internal.SingletonEhcacheRegionFactory
[INFO ] 04-04-2022 10:26:51 [main] Version - HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BooleanType@79c5636f
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BooleanType@79c5636f
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@79c5636f
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@757f675c
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.TrueFalseType@535b8c24
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.YesNoType@5e63cad
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.ByteType@55b5e331
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.ByteType@55b5e331
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@55b5e331
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration character -> org.hibernate.type.CharacterType@219f4597
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration char -> org.hibernate.type.CharacterType@219f4597
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@219f4597
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration short -> org.hibernate.type.ShortType@46b695ec
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration short -> org.hibernate.type.ShortType@46b695ec
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@46b695ec
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.IntegerType@3af9aa66
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration int -> org.hibernate.type.IntegerType@3af9aa66
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@3af9aa66
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration long -> org.hibernate.type.LongType@64d43929
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration long -> org.hibernate.type.LongType@64d43929
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.LongType@64d43929
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration float -> org.hibernate.type.FloatType@1e7f2e0f
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration float -> org.hibernate.type.FloatType@1e7f2e0f
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@1e7f2e0f
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration double -> org.hibernate.type.DoubleType@2516fc68
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration double -> org.hibernate.type.DoubleType@2516fc68
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@2516fc68
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@347bdeef
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@347bdeef
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@49298ce7
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@49298ce7
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration string -> org.hibernate.type.StringType@4a325eb9
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.StringType@4a325eb9
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@194152cf
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@ec50f54
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration url -> org.hibernate.type.UrlType@6c000e0c
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.UrlType@6c000e0c
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.DurationType@9ec531
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@9ec531
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration Instant -> org.hibernate.type.InstantType@4e6d7365
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@4e6d7365
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@64a896b0
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@64a896b0
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@73d6d0c
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@73d6d0c
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@1500e009
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@1500e009
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@cd7f1ae
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@cd7f1ae
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@7a356a0d
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@7a356a0d
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@22df874e
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@22df874e
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration date -> org.hibernate.type.DateType@7de4a01f
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.DateType@7de4a01f
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration time -> org.hibernate.type.TimeType@907f2b7
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@907f2b7
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.TimestampType@75699e35
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@75699e35
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@75699e35
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@1f14f20c
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.CalendarType@48e7b3d2
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@48e7b3d2
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@48e7b3d2
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@6f89f665
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.CalendarTimeType@c96a4ea
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.LocaleType@3935e9a8
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@3935e9a8
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.CurrencyType@66d57c1b
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@66d57c1b
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.TimeZoneType@697446d4
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@697446d4
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration class -> org.hibernate.type.ClassType@75504cef
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@75504cef
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@138a7441
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@138a7441
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@7e31ce0f
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BinaryType@64e92d61
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BinaryType@64e92d61
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BinaryType@64e92d61
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@79b663b3
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@79b663b3
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@79b663b3
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.RowVersionType@5649ec46
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration image -> org.hibernate.type.ImageType@4fe01805
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.CharArrayType@3e521715
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.CharArrayType@3e521715
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.CharArrayType@3e521715
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@5767b2af
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@5767b2af
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@5767b2af
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration text -> org.hibernate.type.TextType@48b0e701
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.NTextType@7fae4d4a
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BlobType@5ffc5491
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@5ffc5491
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@3bd55d8
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.ClobType@6b04acb2
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@6b04acb2
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.NClobType@30b9eadd
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@30b9eadd
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@4dd94a58
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@72be135f
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.SerializableType@27cbfddf
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration object -> org.hibernate.type.ObjectType@77bb0ab5
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@77bb0ab5
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@5488b5c5
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@4248ed58
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@712ca57b
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@4564e94b
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@54534abf
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@51745f40
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@45673f68
[DEBUG] 04-04-2022 10:26:51 [main] BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@27abb83e
[DEBUG] 04-04-2022 10:26:51 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
[DEBUG] 04-04-2022 10:26:51 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
[DEBUG] 04-04-2022 10:26:51 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
[DEBUG] 04-04-2022 10:26:51 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
[DEBUG] 04-04-2022 10:26:51 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
[DEBUG] 04-04-2022 10:26:51 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
[DEBUG] 04-04-2022 10:26:51 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
[DEBUG] 04-04-2022 10:26:51 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
[DEBUG] 04-04-2022 10:26:51 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
[DEBUG] 04-04-2022 10:26:51 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
[DEBUG] 04-04-2022 10:26:51 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
[DEBUG] 04-04-2022 10:26:51 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
[DEBUG] 04-04-2022 10:26:51 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
[DEBUG] 04-04-2022 10:26:51 [main] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
[INFO ] 04-04-2022 10:26:51 [main] C3P0ConnectionProvider - HHH010002: C3P0 using driver: com.mysql.cj.jdbc.Driver at URL: jdbc:mysql://localhost:3306/employee
[INFO ] 04-04-2022 10:26:51 [main] C3P0ConnectionProvider - HHH10001001: Connection properties: {password=****, user=root}
[INFO ] 04-04-2022 10:26:51 [main] C3P0ConnectionProvider - HHH10001003: Autocommit mode: false
[INFO ] 04-04-2022 10:26:51 [main] C3P0ConnectionProvider - HHH10001007: JDBC isolation level: <unknown>
[DEBUG] 04-04-2022 10:26:51 [main] JdbcEnvironmentInitiator - Database ->
       name : MySQL
    version : 5.5.5-10.4.22-MariaDB
      major : 5
      minor : 5
[DEBUG] 04-04-2022 10:26:51 [main] JdbcEnvironmentInitiator - Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.19 (Revision: a0ca826f5cdf51a98356fdfb1bf251eb042f80bf)
      major : 8
      minor : 0
[DEBUG] 04-04-2022 10:26:51 [main] JdbcEnvironmentInitiator - JDBC version : 4.2
[INFO ] 04-04-2022 10:26:51 [main] Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQLDialect
[DEBUG] 04-04-2022 10:26:51 [main] IdentifierHelperBuilder - JDBC driver metadata reported database stores quoted identifiers in more than one case
[DEBUG] 04-04-2022 10:26:51 [main] IdentifierHelperBuilder - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
[DEBUG] 04-04-2022 10:26:51 [main] TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@301aa982] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@5fc930f0]
[DEBUG] 04-04-2022 10:26:51 [main] Namespace - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
[DEBUG] 04-04-2022 10:26:51 [main] AnnotationBinder - Binding entity from annotated class: models.Employee
[DEBUG] 04-04-2022 10:26:51 [main] Ejb3Column - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
[DEBUG] 04-04-2022 10:26:51 [main] EntityBinder - Import with entity name Employee
[DEBUG] 04-04-2022 10:26:51 [main] EntityBinder - Bind entity models.Employee on table employee
[DEBUG] 04-04-2022 10:26:51 [main] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(employee), mappingColumn=id, insertable=true, updatable=true, unique=false}
[DEBUG] 04-04-2022 10:26:51 [main] ClassLoaderAccessImpl - Not known whether passed class name [models.Employee] is safe
[DEBUG] 04-04-2022 10:26:51 [main] ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : models.Employee
[DEBUG] 04-04-2022 10:26:51 [main] PropertyBinder - MetadataSourceProcessor property id with lazy=false
[DEBUG] 04-04-2022 10:26:51 [main] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [models.Employee:id]
[DEBUG] 04-04-2022 10:26:51 [main] SimpleValueBinder - building SimpleValue for id
[DEBUG] 04-04-2022 10:26:51 [main] PropertyBinder - Building property id
[DEBUG] 04-04-2022 10:26:51 [main] BinderHelper - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
[DEBUG] 04-04-2022 10:26:51 [main] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(employee), mappingColumn=address, insertable=true, updatable=true, unique=false}
[DEBUG] 04-04-2022 10:26:51 [main] PropertyBinder - MetadataSourceProcessor property address with lazy=false
[DEBUG] 04-04-2022 10:26:51 [main] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [models.Employee:address]
[DEBUG] 04-04-2022 10:26:51 [main] SimpleValueBinder - building SimpleValue for address
[DEBUG] 04-04-2022 10:26:51 [main] PropertyBinder - Building property address
[DEBUG] 04-04-2022 10:26:51 [main] Ejb3Column - Binding column: Ejb3JoinColumn{logicalColumnName='dept_id', referencedColumn='', mappedBy=''}
[DEBUG] 04-04-2022 10:26:51 [main] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(employee), mappingColumn=department, insertable=true, updatable=true, unique=false}
[DEBUG] 04-04-2022 10:26:51 [main] PropertyBinder - Building property department
[DEBUG] 04-04-2022 10:26:51 [main] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(employee), mappingColumn=email, insertable=true, updatable=true, unique=false}
[DEBUG] 04-04-2022 10:26:51 [main] PropertyBinder - MetadataSourceProcessor property email with lazy=false
[DEBUG] 04-04-2022 10:26:51 [main] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [models.Employee:email]
[DEBUG] 04-04-2022 10:26:51 [main] SimpleValueBinder - building SimpleValue for email
[DEBUG] 04-04-2022 10:26:51 [main] PropertyBinder - Building property email
[DEBUG] 04-04-2022 10:26:51 [main] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(employee), mappingColumn=fullName, insertable=true, updatable=true, unique=false}
[DEBUG] 04-04-2022 10:26:51 [main] PropertyBinder - MetadataSourceProcessor property fullName with lazy=false
[DEBUG] 04-04-2022 10:26:51 [main] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [models.Employee:fullName]
[DEBUG] 04-04-2022 10:26:51 [main] SimpleValueBinder - building SimpleValue for fullName
[DEBUG] 04-04-2022 10:26:51 [main] PropertyBinder - Building property fullName
[DEBUG] 04-04-2022 10:26:51 [main] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(employee), mappingColumn=phoneNumber, insertable=true, updatable=true, unique=false}
[DEBUG] 04-04-2022 10:26:51 [main] PropertyBinder - MetadataSourceProcessor property phoneNumber with lazy=false
[DEBUG] 04-04-2022 10:26:51 [main] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [models.Employee:phoneNumber]
[DEBUG] 04-04-2022 10:26:51 [main] SimpleValueBinder - building SimpleValue for phoneNumber
[DEBUG] 04-04-2022 10:26:51 [main] PropertyBinder - Building property phoneNumber
[DEBUG] 04-04-2022 10:26:51 [main] AnnotationBinder - Binding entity from annotated class: models.Department
[DEBUG] 04-04-2022 10:26:51 [main] Ejb3Column - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
[DEBUG] 04-04-2022 10:26:51 [main] EntityBinder - Import with entity name Department
[DEBUG] 04-04-2022 10:26:51 [main] EntityBinder - Bind entity models.Department on table departments
[DEBUG] 04-04-2022 10:26:51 [main] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(departments), mappingColumn=dept_id, insertable=true, updatable=true, unique=false}
[DEBUG] 04-04-2022 10:26:51 [main] ClassLoaderAccessImpl - Not known whether passed class name [models.Department] is safe
[DEBUG] 04-04-2022 10:26:51 [main] ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : models.Department
[DEBUG] 04-04-2022 10:26:51 [main] PropertyBinder - MetadataSourceProcessor property dept_id with lazy=false
[DEBUG] 04-04-2022 10:26:51 [main] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [models.Department:dept_id]
[DEBUG] 04-04-2022 10:26:51 [main] SimpleValueBinder - building SimpleValue for dept_id
[DEBUG] 04-04-2022 10:26:51 [main] PropertyBinder - Building property dept_id
[DEBUG] 04-04-2022 10:26:51 [main] BinderHelper - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(dept_id)]), dept_id, identity, , ...)
[DEBUG] 04-04-2022 10:26:51 [main] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(departments), mappingColumn=dept_name, insertable=true, updatable=true, unique=false}
[DEBUG] 04-04-2022 10:26:51 [main] PropertyBinder - MetadataSourceProcessor property dept_name with lazy=false
[DEBUG] 04-04-2022 10:26:51 [main] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [models.Department:dept_name]
[DEBUG] 04-04-2022 10:26:51 [main] SimpleValueBinder - building SimpleValue for dept_name
[DEBUG] 04-04-2022 10:26:51 [main] PropertyBinder - Building property dept_name
[DEBUG] 04-04-2022 10:26:51 [main] SimpleValueBinder - Starting fillSimpleValue for id
[DEBUG] 04-04-2022 10:26:51 [main] SimpleValueBinder - Starting fillSimpleValue for address
[DEBUG] 04-04-2022 10:26:51 [main] SimpleValueBinder - Starting fillSimpleValue for email
[DEBUG] 04-04-2022 10:26:51 [main] SimpleValueBinder - Starting fillSimpleValue for fullName
[DEBUG] 04-04-2022 10:26:51 [main] SimpleValueBinder - Starting fillSimpleValue for phoneNumber
[DEBUG] 04-04-2022 10:26:51 [main] SimpleValueBinder - Starting fillSimpleValue for dept_id
[DEBUG] 04-04-2022 10:26:51 [main] SimpleValueBinder - Starting fillSimpleValue for dept_name
[DEBUG] 04-04-2022 10:26:51 [main] PrimaryKey - Forcing column [id] to be non-null as it is part of the primary key for table [employee]
[DEBUG] 04-04-2022 10:26:51 [main] PrimaryKey - Forcing column [dept_id] to be non-null as it is part of the primary key for table [departments]
[DEBUG] 04-04-2022 10:26:51 [main] InFlightMetadataCollectorImpl - Resolving reference to class: models.Department
[DEBUG] 04-04-2022 10:26:51 [main] InFlightMetadataCollectorImpl - Resolving reference to class: models.Department
[DEBUG] 04-04-2022 10:26:51 [main] SessionFactoryImpl - Building session factory
[DEBUG] 04-04-2022 10:26:51 [main] Settings - SessionFactory name : null
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Automatic flush during beforeCompletion(): enabled
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Automatic session close at end of transaction: disabled
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Statistics: disabled
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Deleted entity synthetic identifier rollback: disabled
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Default entity-mode: pojo
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Allow initialization of lazy state outside session : disabled
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Using BatchFetchStyle : LEGACY
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Default batch fetch size: -1
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Maximum outer join fetch depth: 2
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Default null ordering: NONE
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Order SQL updates by primary key: disabled
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Order SQL inserts for batching: disabled
[DEBUG] 04-04-2022 10:26:51 [main] Settings - multi-tenancy strategy : NONE
[DEBUG] 04-04-2022 10:26:51 [main] Settings - JTA Track by Thread: enabled
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Query language substitutions: {}
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Named query checking : enabled
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Second-level cache: enabled
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Second-level query cache: enabled
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Second-level query cache factory: org.hibernate.cache.internal.StandardTimestampsCacheFactory@475646d4
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Second-level cache region prefix: null
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Optimize second-level cache for minimal puts: disabled
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Structured second-level cache entries: disabled
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Second-level cache direct-reference entries: disabled
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Automatic eviction of collection cache: disabled
[DEBUG] 04-04-2022 10:26:51 [main] Settings - JDBC batch size: 15
[DEBUG] 04-04-2022 10:26:51 [main] Settings - JDBC batch updates for versioned data: enabled
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Scrollable result sets: enabled
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Wrap result sets: disabled
[DEBUG] 04-04-2022 10:26:51 [main] Settings - JDBC3 getGeneratedKeys(): enabled
[DEBUG] 04-04-2022 10:26:51 [main] Settings - JDBC result set fetch size: null
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Connection release mode: AFTER_TRANSACTION
[DEBUG] 04-04-2022 10:26:51 [main] Settings - Generate SQL with comments: disabled
[DEBUG] 04-04-2022 10:26:51 [main] Settings - JPA compliance - query : disabled
[DEBUG] 04-04-2022 10:26:51 [main] Settings - JPA compliance - closed-handling : disabled
[DEBUG] 04-04-2022 10:26:51 [main] Settings - JPA compliance - lists : disabled
[DEBUG] 04-04-2022 10:26:51 [main] Settings - JPA compliance - transactions : disabled
[DEBUG] 04-04-2022 10:26:51 [main] SessionFactoryServiceRegistryImpl - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
[DEBUG] 04-04-2022 10:26:51 [main] SessionFactoryServiceRegistryImpl - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
[DEBUG] 04-04-2022 10:26:51 [main] SingletonEhcacheRegionFactory - prepending / to /ehcache.xml. It should be placed in the root of the classpath rather than in a package.
[DEBUG] 04-04-2022 10:26:51 [main] ehcache - Creating EhCacheRegionFactory from a specified resource: /ehcache.xml.  Resolved to URL: file:/D:/MyMaven/Hibernate/target/classes/ehcache.xml
[WARN ] 04-04-2022 10:26:52 [main] cache - HHH90001006: Missing cache[default-update-timestamps-region] was created on-the-fly. The created cache will use a provider-specific default configuration: make sure you defined one. You can disable this warning by setting 'hibernate.cache.ehcache.missing_cache_strategy' to 'create'.
[WARN ] 04-04-2022 10:26:52 [main] cache - HHH90001007: Using legacy cache name [org.hibernate.cache.internal.StandardQueryCache] because configuration could not be found for cache [default-query-results-region]. Update your configuration to rename cache [org.hibernate.cache.internal.StandardQueryCache] to [default-query-results-region].
[DEBUG] 04-04-2022 10:26:52 [main] SessionFactoryImpl - Session factory constructed with filter configurations : {}
[DEBUG] 04-04-2022 10:26:52 [main] SessionFactoryImpl - Instantiating session factory with properties: {hibernate.format_sql=true, java.specification.version=17, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, hibernate.dialect=org.hibernate.dialect.MySQLDialect, hibernate.c3p0.min_size=5, java.class.path=D:\MyMaven\Hibernate\target\classes;C:\Users\dtson1.TMA\.m2\repository\javax\servlet\jstl\1.2\jstl-1.2.jar;C:\Users\dtson1.TMA\.m2\repository\mysql\mysql-connector-java\8.0.19\mysql-connector-java-8.0.19.jar;C:\Users\dtson1.TMA\.m2\repository\org\hibernate\hibernate-c3p0\5.6.7.Final\hibernate-c3p0-5.6.7.Final.jar;C:\Users\dtson1.TMA\.m2\repository\org\jboss\logging\jboss-logging\3.4.3.Final\jboss-logging-3.4.3.Final.jar;C:\Users\dtson1.TMA\.m2\repository\com\mchange\c3p0\0.9.5.5\c3p0-0.9.5.5.jar;C:\Users\dtson1.TMA\.m2\repository\com\mchange\mchange-commons-java\0.2.19\mchange-commons-java-0.2.19.jar;C:\Users\dtson1.TMA\.m2\repository\org\apache\logging\log4j\log4j-api\2.17.2\log4j-api-2.17.2.jar;C:\Users\dtson1.TMA\.m2\repository\org\apache\logging\log4j\log4j-core\2.17.2\log4j-core-2.17.2.jar;C:\Users\dtson1.TMA\.m2\repository\org\hibernate\hibernate-core\5.6.7.Final\hibernate-core-5.6.7.Final.jar;C:\Users\dtson1.TMA\.m2\repository\javax\persistence\javax.persistence-api\2.2\javax.persistence-api-2.2.jar;C:\Users\dtson1.TMA\.m2\repository\net\bytebuddy\byte-buddy\1.12.8\byte-buddy-1.12.8.jar;C:\Users\dtson1.TMA\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\dtson1.TMA\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.1.1.Final\jboss-transaction-api_1.2_spec-1.1.1.Final.jar;C:\Users\dtson1.TMA\.m2\repository\org\jboss\jandex\2.4.2.Final\jandex-2.4.2.Final.jar;C:\Users\dtson1.TMA\.m2\repository\com\fasterxml\classmate\1.5.1\classmate-1.5.1.jar;C:\Users\dtson1.TMA\.m2\repository\javax\activation\javax.activation-api\1.2.0\javax.activation-api-1.2.0.jar;C:\Users\dtson1.TMA\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.1.2.Final\hibernate-commons-annotations-5.1.2.Final.jar;C:\Users\dtson1.TMA\.m2\repository\javax\xml\bind\jaxb-api\2.3.1\jaxb-api-2.3.1.jar;C:\Users\dtson1.TMA\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.1\jaxb-runtime-2.3.1.jar;C:\Users\dtson1.TMA\.m2\repository\org\glassfish\jaxb\txw2\2.3.1\txw2-2.3.1.jar;C:\Users\dtson1.TMA\.m2\repository\com\sun\istack\istack-commons-runtime\3.0.7\istack-commons-runtime-3.0.7.jar;C:\Users\dtson1.TMA\.m2\repository\org\jvnet\staxex\stax-ex\1.8\stax-ex-1.8.jar;C:\Users\dtson1.TMA\.m2\repository\com\sun\xml\fastinfoset\FastInfoset\1.2.15\FastInfoset-1.2.15.jar;C:\Users\dtson1.TMA\.m2\repository\org\ehcache\ehcache\3.0.0\ehcache-3.0.0.jar;C:\Users\dtson1.TMA\.m2\repository\org\hibernate\hibernate-ehcache\5.6.7.Final\hibernate-ehcache-5.6.7.Final.jar;C:\Users\dtson1.TMA\.m2\repository\net\sf\ehcache\ehcache\2.10.6\ehcache-2.10.6.jar;C:\Users\dtson1.TMA\.m2\repository\org\slf4j\slf4j-simple\2.0.0-alpha7\slf4j-simple-2.0.0-alpha7.jar;C:\Users\dtson1.TMA\.m2\repository\org\slf4j\slf4j-api\2.0.0-alpha7\slf4j-api-2.0.0-alpha7.jar, net.sf.ehcache.configurationResourceName=ehcache.xml, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, hbm2ddl.auto=update, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Asia/Bangkok, java.vm.specification.version=17, os.name=Windows 10, current_session_context_class=thread, cache.use_query_cache=true, sun.java.launcher=SUN_STANDARD, user.country=US, sun.boot.library.path=C:\Users\dtson1.TMA\.jdks\openjdk-17.0.2\bin, sun.java.command=dao.EmployeeDao, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\dtson1.TMA, hibernate.c3p0.max_statements=50, user.language=en, java.specification.vendor=Oracle Corporation, java.version.date=2022-01-18, java.home=C:\Users\dtson1.TMA\.jdks\openjdk-17.0.2, file.separator=\, java.vm.compressedOopsMode=Zero based, line.separator=
, hibernate.c3p0.timeout=180, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory, hibernate.hbm2ddl.auto=update, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, hibernate.c3p0.max_size=200, java.runtime.version=17.0.2+8-86, user.name=dtson1, hibernate.cache.use_query_cache=true, path.separator=;, hibernate.net.sf.ehcache.configurationResourceName=ehcache.xml, hibernate.connection.username=****, os.version=10.0, java.runtime.name=OpenJDK Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost:3306/employee, file.encoding=UTF-8, format_sql=true, java.vm.name=OpenJDK 64-Bit Server VM, hibernate.show_sql=true, hibernate.current_session_context_class=thread, show_sql=true, hibernate.connection.driver_class=com.mysql.cj.jdbc.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=C:\Users\dtson1.TMA\AppData\Local\Temp\, java.version=17.0.2, user.dir=D:\MyMaven\Hibernate, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@72503b19, native.encoding=Cp1252, hibernate.cache.use_second_level_cache=true, java.library.path=C:\Users\dtson1.TMA\.jdks\openjdk-17.0.2\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files\Eclipse Adoptium\jdk-11.0.14.101-hotspot\bin;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Program Files\nodejs\;C:\Users\dtson1.TMA\AppData\Local\Microsoft\WindowsApps;;C:\Users\dtson1.TMA\AppData\Local\Programs\Microsoft VS Code\bin;C:\Program Files\JetBrains\IntelliJ IDEA 2021.3.2\bin;;., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.2+8-86, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, java.class.version=61.0}
[DEBUG] 04-04-2022 10:26:52 [main] JaccIntegrator - Skipping JACC integration as it was not enabled
[DEBUG] 04-04-2022 10:26:52 [main] SessionFactoryImpl - Instantiated session factory
[DEBUG] 04-04-2022 10:26:52 [main] TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@301aa982] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@bc6288b]
[WARN ] 04-04-2022 10:26:52 [main] cache - HHH90001006: Missing cache[models.Department] was created on-the-fly. The created cache will use a provider-specific default configuration: make sure you defined one. You can disable this warning by setting 'hibernate.cache.ehcache.missing_cache_strategy' to 'create'.
[DEBUG] 04-04-2022 10:26:52 [main] DomainDataRegionTemplate - Generating entity cache access [read-only] : NavigableRole[models.Department]
[WARN ] 04-04-2022 10:26:52 [main] cache - HHH90001003: Read-only caching was requested for mutable entity [NavigableRole[models.Department]]
[WARN ] 04-04-2022 10:26:52 [main] cache - HHH90001006: Missing cache[models.Employee] was created on-the-fly. The created cache will use a provider-specific default configuration: make sure you defined one. You can disable this warning by setting 'hibernate.cache.ehcache.missing_cache_strategy' to 'create'.
[DEBUG] 04-04-2022 10:26:52 [main] DomainDataRegionTemplate - Generating entity cache access [read-only] : NavigableRole[models.Employee]
[WARN ] 04-04-2022 10:26:52 [main] cache - HHH90001003: Read-only caching was requested for mutable entity [NavigableRole[models.Employee]]
[DEBUG] 04-04-2022 10:26:52 [main] ClassLoaderAccessImpl - Not known whether passed class name [models.Department] is safe
[DEBUG] 04-04-2022 10:26:52 [main] ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : models.Department
[DEBUG] 04-04-2022 10:26:52 [main] interceptor - To-one property `models.Employee#department` was mapped with LAZY + NO_PROXY but the class was not enhanced
[DEBUG] 04-04-2022 10:26:52 [main] interceptor - To-one property `models.Employee#department` was mapped with LAZY + NO_PROXY but the class was not enhanced
[DEBUG] 04-04-2022 10:26:52 [main] ClassLoaderAccessImpl - Not known whether passed class name [models.Employee] is safe
[DEBUG] 04-04-2022 10:26:52 [main] ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : models.Employee
[DEBUG] 04-04-2022 10:26:52 [main] interceptor - To-one property `models.Employee#department` was mapped with LAZY + NO_PROXY but the class was not enhanced
[DEBUG] 04-04-2022 10:26:52 [main] interceptor - To-one property `models.Employee#department` was mapped with LAZY + NO_PROXY but the class was not enhanced
[DEBUG] 04-04-2022 10:26:52 [main] AbstractEntityPersister - Static SQL for entity: models.Department
[DEBUG] 04-04-2022 10:26:52 [main] AbstractEntityPersister -  Version select: select dept_id from departments where dept_id =?
[DEBUG] 04-04-2022 10:26:52 [main] AbstractEntityPersister -  Snapshot select: select department_.dept_id, department_.dept_name as dept_nam2_0_ from departments department_ where department_.dept_id=?
[DEBUG] 04-04-2022 10:26:52 [main] AbstractEntityPersister -  Insert 0: insert into departments (dept_name, dept_id) values (?, ?)
[DEBUG] 04-04-2022 10:26:52 [main] AbstractEntityPersister -  Update 0: update departments set dept_name=? where dept_id=?
[DEBUG] 04-04-2022 10:26:52 [main] AbstractEntityPersister -  Delete 0: delete from departments where dept_id=?
[DEBUG] 04-04-2022 10:26:52 [main] AbstractEntityPersister -  Identity insert: insert into departments (dept_name) values (?)
[DEBUG] 04-04-2022 10:26:52 [main] QuerySpacesImpl - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@467045c4]
[DEBUG] 04-04-2022 10:26:52 [main] MetamodelGraphWalker - Visiting attribute path : dept_name
[DEBUG] 04-04-2022 10:26:52 [main] FetchStyleLoadPlanBuildingAssociationVisitationStrategy - Building LoadPlan...
[DEBUG] 04-04-2022 10:26:52 [main] LoadQueryJoinAndFetchProcessor - processing queryspace <gen:0>
[DEBUG] 04-04-2022 10:26:52 [main] LoadPlanTreePrinter - LoadPlan(entity=models.Department)
    - Returns
       - EntityReturnImpl(entity=models.Department, querySpaceUid=<gen:0>, path=models.Department)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=models.Department)
          - SQL table alias mapping - department0_
          - alias suffix - 0_
          - suffixed key columns - {dept_id1_0_0_}

[DEBUG] 04-04-2022 10:26:52 [main] EntityLoader - Static select for entity models.Department [NONE]: select department0_.dept_id as dept_id1_0_0_, department0_.dept_name as dept_nam2_0_0_ from departments department0_ where department0_.dept_id=?
[DEBUG] 04-04-2022 10:26:52 [main] AbstractEntityPersister - Static SQL for entity: models.Employee
[DEBUG] 04-04-2022 10:26:52 [main] AbstractEntityPersister -  Version select: select id from employee where id =?
[DEBUG] 04-04-2022 10:26:52 [main] AbstractEntityPersister -  Snapshot select: select employee_.id, employee_.address as address2_1_, employee_.dept_id as dept_id6_1_, employee_.email as email3_1_, employee_.fullName as fullname4_1_, employee_.phoneNumber as phonenum5_1_ from employee employee_ where employee_.id=?
[DEBUG] 04-04-2022 10:26:52 [main] AbstractEntityPersister -  Insert 0: insert into employee (address, dept_id, email, fullName, phoneNumber, id) values (?, ?, ?, ?, ?, ?)
[DEBUG] 04-04-2022 10:26:52 [main] AbstractEntityPersister -  Update 0: update employee set address=?, dept_id=?, email=?, fullName=?, phoneNumber=? where id=?
[DEBUG] 04-04-2022 10:26:52 [main] AbstractEntityPersister -  Delete 0: delete from employee where id=?
[DEBUG] 04-04-2022 10:26:52 [main] AbstractEntityPersister -  Identity insert: insert into employee (address, dept_id, email, fullName, phoneNumber) values (?, ?, ?, ?, ?)
[DEBUG] 04-04-2022 10:26:52 [main] QuerySpacesImpl - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@677ce519]
[DEBUG] 04-04-2022 10:26:52 [main] MetamodelGraphWalker - Visiting attribute path : address
[DEBUG] 04-04-2022 10:26:52 [main] MetamodelGraphWalker - Visiting attribute path : department
[DEBUG] 04-04-2022 10:26:52 [main] QuerySpacesImpl - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2fe2965c]
[DEBUG] 04-04-2022 10:26:52 [main] MetamodelGraphWalker - Visiting attribute path : department.dept_name
[DEBUG] 04-04-2022 10:26:52 [main] MetamodelGraphWalker - Visiting attribute path : email
[DEBUG] 04-04-2022 10:26:52 [main] MetamodelGraphWalker - Visiting attribute path : fullName
[DEBUG] 04-04-2022 10:26:52 [main] MetamodelGraphWalker - Visiting attribute path : phoneNumber
[DEBUG] 04-04-2022 10:26:52 [main] FetchStyleLoadPlanBuildingAssociationVisitationStrategy - Building LoadPlan...
[DEBUG] 04-04-2022 10:26:52 [main] LoadQueryJoinAndFetchProcessor - processing queryspace <gen:0>
[DEBUG] 04-04-2022 10:26:52 [main] LoadPlanTreePrinter - LoadPlan(entity=models.Employee)
    - Returns
       - EntityReturnImpl(entity=models.Employee, querySpaceUid=<gen:0>, path=models.Employee)
          - EntityAttributeFetchImpl(entity=models.Department, querySpaceUid=<gen:1>, path=models.Employee.department)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=models.Employee)
          - SQL table alias mapping - employee0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(department)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=models.Department)
                - SQL table alias mapping - department1_
                - alias suffix - 1_
                - suffixed key columns - {dept_id1_0_1_}

[DEBUG] 04-04-2022 10:26:52 [main] EntityLoader - Static select for entity models.Employee [NONE]: select employee0_.id as id1_1_0_, employee0_.address as address2_1_0_, employee0_.dept_id as dept_id6_1_0_, employee0_.email as email3_1_0_, employee0_.fullName as fullname4_1_0_, employee0_.phoneNumber as phonenum5_1_0_, department1_.dept_id as dept_id1_0_1_, department1_.dept_name as dept_nam2_0_1_ from employee employee0_ left outer join departments department1_ on employee0_.dept_id=department1_.dept_id where employee0_.id=?
[INFO ] 04-04-2022 10:26:52 [main] access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@5d71b500] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
[DEBUG] 04-04-2022 10:26:52 [main] Table - No alter strings for table : departments
[DEBUG] 04-04-2022 10:26:52 [main] Table - No alter strings for table : employee
[DEBUG] 04-04-2022 10:26:52 [main] NamedQueryRepository - Checking 0 named HQL queries
[DEBUG] 04-04-2022 10:26:52 [main] NamedQueryRepository - Checking 0 named SQL queries
[DEBUG] 04-04-2022 10:26:52 [main] SessionFactoryServiceRegistryImpl - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
[DEBUG] 04-04-2022 10:26:52 [main] SessionFactoryRegistry - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@6d69a0d3
[DEBUG] 04-04-2022 10:26:52 [main] SessionFactoryRegistry - Registering SessionFactory: e5dcb197-de8e-4676-b12b-d139adc62218 (<unnamed>)
[DEBUG] 04-04-2022 10:26:52 [main] SessionFactoryRegistry - Not binding SessionFactory to JNDI, no JNDI name configured
[DEBUG] 04-04-2022 10:26:52 [main] StatisticsInitiator - Statistics initialized [enabled=false]
[DEBUG] 04-04-2022 10:26:52 [main] QueryTranslatorFactoryInitiator - QueryTranslatorFactory: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@13278a41
[DEBUG] 04-04-2022 10:26:52 [main] QueryTranslatorImpl - parse() - HQL: from models.Employee e Where e.id = :id
[DEBUG] 04-04-2022 10:26:52 [main] ErrorTracker - throwQueryException() : no errors
[DEBUG] 04-04-2022 10:26:52 [main] QueryTranslatorImpl - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'models'
    |        |  \-[IDENT] Node: 'Employee'
    |        \-[ALIAS] Node: 'e'
    \-[WHERE] Node: 'Where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'e'
          |  \-[IDENT] Node: 'id'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'id'

[DEBUG] 04-04-2022 10:26:52 [main] HqlSqlBaseWalker - select << begin [level=1, statement=select]
[DEBUG] 04-04-2022 10:26:52 [main] FromElement - FromClause{level=1} : models.Employee (e) -> employee0_
[DEBUG] 04-04-2022 10:26:52 [main] FromReferenceNode - Resolved : e -> employee0_.id
[DEBUG] 04-04-2022 10:26:52 [main] DotNode - getDataType() : id -> org.hibernate.type.IntegerType@3af9aa66
[DEBUG] 04-04-2022 10:26:52 [main] FromReferenceNode - Resolved : e.id -> employee0_.id
[DEBUG] 04-04-2022 10:26:52 [main] HqlSqlBaseWalker - select : finishing up [level=1, statement=select]
[DEBUG] 04-04-2022 10:26:52 [main] HqlSqlWalker - processQuery() :  ( SELECT ( FromClause{level=1} employee employee0_ ) ( Where ( = ( employee0_.id employee0_.id id ) ? ) ) )
[DEBUG] 04-04-2022 10:26:52 [main] HqlSqlWalker - Derived SELECT clause created.
[DEBUG] 04-04-2022 10:26:52 [main] JoinProcessor - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity Employee): [employee]
    |  +-SelectExpressionImpl
    |  | persister: SingleTableEntityPersister(models.Employee)
    |  \-SqlFragment
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-BinaryLogicOperatorNode
          +-DotNode
          | persister: SingleTableEntityPersister(models.Employee)
          | path: e.id
          |  +-IdentNode
          |  | persister: SingleTableEntityPersister(models.Employee)
          |  | originalText: e
          |  \-IdentNode
          |    persister: null
          |    originalText: id
          \-ParameterNode

[DEBUG] 04-04-2022 10:26:52 [main] JoinProcessor - Using FROM fragment [employee employee0_]
[DEBUG] 04-04-2022 10:26:52 [main] HqlSqlBaseWalker - select >> end [level=1, statement=select]
[DEBUG] 04-04-2022 10:26:52 [main] QueryTranslatorImpl - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (employee)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'employee0_.id as id1_1_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=employee,tableAlias=employee0_,origin=null,columns={,className=models.Employee}}}
    |  \-[SQL_TOKEN] SqlFragment: 'employee0_.address as address2_1_, employee0_.dept_id as dept_id6_1_, employee0_.email as email3_1_, employee0_.fullName as fullname4_1_, employee0_.phoneNumber as phonenum5_1_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[e], fromElementByTableAlias=[employee0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'employee employee0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=null,tableName=employee,tableAlias=employee0_,origin=null,columns={,className=models.Employee}}
    \-[WHERE] SqlNode: 'Where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'employee0_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=e.id,tableAlias=employee0_,className=models.Employee,classAlias=e}
          |  +-[ALIAS_REF] IdentNode: 'employee0_.id' {alias=e, className=models.Employee, tableAlias=employee0_}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[NAMED_PARAM] ParameterNode: '?' {name=id, expectedType=org.hibernate.type.IntegerType@3af9aa66}

[DEBUG] 04-04-2022 10:26:52 [main] ErrorTracker - throwQueryException() : no errors
[DEBUG] 04-04-2022 10:26:52 [main] QueryTranslatorImpl - HQL: from models.Employee e Where e.id = :id
[DEBUG] 04-04-2022 10:26:52 [main] QueryTranslatorImpl - SQL: select employee0_.id as id1_1_, employee0_.address as address2_1_, employee0_.dept_id as dept_id6_1_, employee0_.email as email3_1_, employee0_.fullName as fullname4_1_, employee0_.phoneNumber as phonenum5_1_ from employee employee0_ where employee0_.id=?
[DEBUG] 04-04-2022 10:26:52 [main] ErrorTracker - throwQueryException() : no errors
[DEBUG] 04-04-2022 10:26:52 [main] QueryResultsCacheImpl - Checking cached query results in region: models.Employee
[DEBUG] 04-04-2022 10:26:52 [main] QueryResultsCacheImpl - Query results were not found in cache
[DEBUG] 04-04-2022 10:26:52 [main] SQL - 
    select
        employee0_.id as id1_1_,
        employee0_.address as address2_1_,
        employee0_.dept_id as dept_id6_1_,
        employee0_.email as email3_1_,
        employee0_.fullName as fullname4_1_,
        employee0_.phoneNumber as phonenum5_1_ 
    from
        employee employee0_ 
    where
        employee0_.id=?
[DEBUG] 04-04-2022 10:26:52 [main] Loader - Result set row: 0
[DEBUG] 04-04-2022 10:26:52 [main] Loader - Result row: EntityKey[models.Employee#4]
[DEBUG] 04-04-2022 10:26:52 [main] TwoPhaseLoad - Resolving attributes for [models.Employee#4]
[DEBUG] 04-04-2022 10:26:52 [main] TwoPhaseLoad - Processing attribute `address` : value = France
[DEBUG] 04-04-2022 10:26:52 [main] TwoPhaseLoad - Attribute (`address`)  - enhanced for lazy-loading? - false
[DEBUG] 04-04-2022 10:26:52 [main] TwoPhaseLoad - Processing attribute `department` : value = 2
[DEBUG] 04-04-2022 10:26:52 [main] TwoPhaseLoad - Attribute (`department`)  - enhanced for lazy-loading? - false
[DEBUG] 04-04-2022 10:26:52 [main] SQL - 
    select
        department0_.dept_id as dept_id1_0_0_,
        department0_.dept_name as dept_nam2_0_0_ 
    from
        departments department0_ 
    where
        department0_.dept_id=?
[DEBUG] 04-04-2022 10:26:52 [main] EntityReferenceInitializerImpl - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
[DEBUG] 04-04-2022 10:26:52 [main] TwoPhaseLoad - Resolving attributes for [models.Department#2]
[DEBUG] 04-04-2022 10:26:52 [main] TwoPhaseLoad - Processing attribute `dept_name` : value = CFO
[DEBUG] 04-04-2022 10:26:52 [main] TwoPhaseLoad - Attribute (`dept_name`)  - enhanced for lazy-loading? - false
[DEBUG] 04-04-2022 10:26:52 [main] TwoPhaseLoad - Adding entity to second-level cache: [models.Department#2]
[DEBUG] 04-04-2022 10:26:52 [main] TwoPhaseLoad - Done materializing entity [models.Department#2]
[DEBUG] 04-04-2022 10:26:52 [main] AbstractLoadPlanBasedEntityLoader - Done entity load : models.Department#2
[DEBUG] 04-04-2022 10:26:52 [main] TwoPhaseLoad - Processing attribute `email` : value = cist@gmail.com
[DEBUG] 04-04-2022 10:26:52 [main] TwoPhaseLoad - Attribute (`email`)  - enhanced for lazy-loading? - false
[DEBUG] 04-04-2022 10:26:52 [main] TwoPhaseLoad - Processing attribute `fullName` : value = Ajata Chesa
[DEBUG] 04-04-2022 10:26:52 [main] TwoPhaseLoad - Attribute (`fullName`)  - enhanced for lazy-loading? - false
[DEBUG] 04-04-2022 10:26:52 [main] TwoPhaseLoad - Processing attribute `phoneNumber` : value = 0986584562
[DEBUG] 04-04-2022 10:26:52 [main] TwoPhaseLoad - Attribute (`phoneNumber`)  - enhanced for lazy-loading? - false
[DEBUG] 04-04-2022 10:26:52 [main] TwoPhaseLoad - Adding entity to second-level cache: [models.Employee#4]
[DEBUG] 04-04-2022 10:26:52 [main] TwoPhaseLoad - Done materializing entity [models.Employee#4]
[DEBUG] 04-04-2022 10:26:52 [main] QueryResultsCacheImpl - Caching query results in region: models.Employee; timestamp=6754479359336448
[DEBUG] 04-04-2022 10:26:52 [main] LogicalConnectionManagedImpl - Initiating JDBC connection release from afterTransaction
[INFO ] 04-04-2022 10:26:52 [main] EmployeeDao - --------------------------Query: [Employee{id=4, fullName='Ajata Chesa', address='France', phoneNumber='0986584562', email='cist@gmail.com', department=models.Department@61b838f2}]
[DEBUG] 04-04-2022 10:26:52 [main] QueryResultsCacheImpl - Checking cached query results in region: models.Employee
[DEBUG] 04-04-2022 10:26:52 [main] QueryResultsCacheImpl - Returning cached query results
[DEBUG] 04-04-2022 10:26:52 [main] LogicalConnectionManagedImpl - Initiating JDBC connection release from afterTransaction
[INFO ] 04-04-2022 10:26:52 [main] EmployeeDao - --------------------------------Query 2:[Employee{id=4, fullName='Ajata Chesa', address='France', phoneNumber='0986584562', email='cist@gmail.com', department=models.Department@61b838f2}]
[DEBUG] 04-04-2022 10:26:52 [main] SessionFactoryImpl - HHH000031: Closing
[DEBUG] 04-04-2022 10:26:52 [main] TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@6c9a3661] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@bc6288b]
[DEBUG] 04-04-2022 10:26:52 [main] AbstractServiceRegistryImpl - Implicitly destroying ServiceRegistry on de-registration of all child ServiceRegistries
[DEBUG] 04-04-2022 10:26:52 [main] BootstrapServiceRegistryImpl - Implicitly destroying Boot-strap registry on de-registration of all child ServiceRegistries
